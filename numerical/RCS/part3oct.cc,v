head	1.2;
access;
symbols;
locks
	hales:1.2; strict;
comment	@// @;


1.2
date	97.09.17.20.08.25;	author hales;	state Exp;
branches;
next	1.1;

1.1
date	97.09.16.03.10.56;	author hales;	state Exp;
branches;
next	;


desc
@Sphere Packings III,
numerical verification routines for
Hypothesis 4.1 and 4.2 octahedral case
@


1.2
log
@vor_analytic was changed to octavor
@
text
@#include <iomanip.h>
#include <stdlib.h>
#include "numerical.h"
#include "constants.h"
#include <math.h>

class iter {
    double* xmin;
	double* xmax;
	double* x;
    int numiter,numargs,nconstr;
    void (*func)(int numargs,int whichFn,double* x,double* ret,void*);
    void (*constraintfunc)
        (int numargs,int which,double* x,double* ret,void*);
    iter(int);
    ~iter();
    };

static void nofunc(int numargs,int whichFn,double* x,double* ret,void*)
    {
    cout << "nofunc should not be called" << endl << flush;
    }

/* generic function */
double dihC=0,dih2C=0,solC=0,constC=0,gamC=0;
int rC[4]={0,0,0,0};

static void setConst(double d,double d2,double s,double c,
		double g, int r0,int r1,int r2,int r3)
	{ 
	dihC=d; dih2C=d2; solC=s; constC=c; gamC=g; 
	rC[0]=r0; rC[1]=r1; rC[2]=r2; rC[3]=r3; 
	}

static double gv(double x1,double x2,double x3,double x4,double x5,
	double x6,int r)
	{
	if (r) return // octavor
		0.5*(vor_analytic(x1,x2,x3,x4,x5,x6)
				+vor_analytic(x1,x6,x5,x4,x3,x2));
		
	return gamma(x1,x2,x3,x4,x5,x6);
	}

double calculateX12(double x[12])
	{
	// based on series.cc:x4_upper_from_dih_upper:
	double x1=x[2]*x[2], x2=x[0]*x[0], x3=x[10]*x[10],
						 x5=x[9]*x[9], x6=x[4]*x[4];
	// D[delta,x4] = -2x1x4 + b:
    double b = -x1*x1 + x1*x2 + x1*x3 - x2*x3 +
            x1*x5 + x2*x5 + x1*x6 + x3*x6 - x5*x6;
	// denom of cosdih.
    double den = (x1*x1 - 2.0*x1*x3 + x3*x3 - 2.0*x1*x5 - 2.0*x3*x5 + x5*x5)
                *(x1*x1 - 2.0*x1*x2 + x2*x2 - 2.0*x1*x6 - 2.0*x2*x6 + x6*x6);
	double theta =
		dihedraly(x[2],x[0],x[1],x[5],x[3],x[4])+
		dihedraly(x[2],x[1],x[6],x[8],x[7],x[3])+
		dihedraly(x[2],x[6],x[10],x[11],x[9],x[7]);
	double rhs = cos(theta)*sqrt(den);
	//cout << den << " " << theta << " " << rhs << " " << b << endl;
	return sqrt((-rhs+b)/(2.0*x1));
	}



static void sigdihsol(int numargs,int whichFn,double* x, double* ret,void*)
	{
	double x12 = calculateX12(x);
	*ret = 
	dihC*(dihedraly(x[0],x[1],x[2],x[3],x[4],x[5]) + 
			dihedraly(x[0],x[10],x[2],x[9],x[4],x12)
		 ) 
	+ dih2C*(dihedraly(x[1],x[0],x[2],x[4],x[3],x[5])+
				dihedraly(x[1],x[6],x[2],x[7],x[3],x[8])
		 )
	+ solC*(solid(x[1],x[0],x[2],x[4],x[3],x[5])+
			solid(x[1],x[6],x[2],x[7],x[3],x[8])+
			solid(x[0],x[10],x[2],x[9],x[4],x12)+
			solid(x[2],x[6],x[10],x[11],x[9],x[7])
			)
	+ constC 
	+ gamC*(gv(x[1],x[0],x[2],x[4],x[3],x[5],rC[0]||rC[1])+
			gv(x[1],x[6],x[2],x[7],x[3],x[8],rC[1]||rC[2])+
			gv(x[0],x[10],x[2],x[9],x[4],x12,rC[0]||rC[3])+
			gv(x[2],x[6],x[10],x[11],x[9],x[7],rC[2]||rC[3])
			);
	}

iter::~iter() 
	{ delete[] xmin; 
	  delete[] xmax; 
		delete[] x; }

static void radConstraint(int numargs,int whichFn,double* x,double* ret,void*)
    {
	switch(whichFn) {
	case 1 : *ret = (radf(x[0],x[2],x[4])-global::sqrt2)*(rC[0]?-1:1); break;
	case 2 : *ret = (radf(x[1],x[2],x[3])-global::sqrt2)*(rC[1]?-1:1); break;
	case 3 : *ret = (radf(x[2],x[6],x[7])-global::sqrt2)*(rC[2]?-1:1); break;
	case 4 : *ret = (radf(x[2],x[9],x[10])-global::sqrt2)*(rC[3]?-1:1);break;
	case 5 : *ret = (calculateX12(x)-2.51); break;
	case 6 : *ret = (-calculateX12(x)+2.0); break;
	default: *ret = 0; cout << "error!" << endl; break;
	}
    }

iter::iter(int ineqSwitch) {
	numiter = 10; numargs = 12; nconstr=6;
	xmin = new double[numargs];
	xmax = new double[numargs];
	x = new double[numargs];
	constraintfunc = radConstraint;
	func = sigdihsol;
	double zetapt = 0.1004445714270568;
	double zetapt32 = 3.2*zetapt;
	double pt = 0.0553736456684641;
	int i;
	for (i=0;i<numargs;i++) { xmin[i]=x[i]=2.0; xmax[i]=2.51; }
	xmin[2]=2.51; xmax[2]=global::sqrt8;
	double dihC,dih2C,constC,solC,gamC=-1;
	int caseNumber = ineqSwitch/1000;
	int octType = ineqSwitch % 1000;

	dihC = (caseNumber>=21  ? DD::array[caseNumber-21][1] 
							: CC::array[caseNumber][2]);
	dih2C =(caseNumber >=21 ? dihC : 0);
	solC  =(caseNumber >=21 ? 0 : CC::array[caseNumber][0]);
	constC=(caseNumber >=21 ? DD::array[caseNumber-21][0] 
							: CC::array[caseNumber][1]);
	gamC = -1;
	int r0,r1,r2,r3;
	
	switch (ineqSwitch % 1000) {
	case 0 : r0=1; r1=1; r2=1; r3=1; break;
	case 1 : r0=0; r1=1; r2=1; r3=1; break;
	case 2 : r0=1; r1=0; r2=1; r3=1; break;
	case 3 : r0=1; r1=1; r2=0; r3=1; break;
	case 4 : r0=1; r1=1; r2=1; r3=0; break;
	case 5 : r0=0; r1=0; r2=1; r3=1; break;
	case 6 : r0=0; r1=1; r2=0; r3=1; break;
	case 7 : r0=0; r1=1; r2=1; r3=0; break;
	case 8 : r0=1; r1=0; r2=0; r3=1; break;
	case 9 : r0=1; r1=0; r2=1; r3=0; break;
	case 10: r0=1; r1=1; r2=0; r3=0; break;
	case 11: r0=0; r1=0; r2=0; r3=1; break;
	case 12: r0=0; r1=0; r2=1; r3=0; break;
	case 13: r0=0; r1=1; r2=0; r3=0; break;
	case 14: r0=1; r1=0; r2=0; r3=0; break;
	case 15: r0=0; r1=0; r2=0; r3=0; break;
	}

	setConst(dihC,dih2C,solC,constC,gamC,r0,r1,r2,r3);
	cout.precision(5);
	cout << "parameters(d,d2,s,c,g,r0,r1,r2,r3) = "
		<< dihC << " " << dih2C << " " << solC << " " << constC << " " <<
		gamC << "; " << r0 << " " << r1 << " " << r2 << " " << r3 << endl;

	}



@


1.1
log
@Initial revision
@
text
@d38 4
a41 1
	if (r) return vor_analytic(x1,x2,x3,x4,x5,x6);
@
