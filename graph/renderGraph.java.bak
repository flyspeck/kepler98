import java.util.*;
import java.applet.Applet;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.*;

public class renderGraph extends Applet implements Runnable {
/***** stuff follows ******/

archive.GraphArrays gr; 
//int GBLregions[][];
//int edges[][];
//int boundary[];

public String getAppletInfo()
	{
	return 
	"Combinatorics for the Kepler Conjecture\n"+
	"by Thomas C. Hales\n"+
	"July 1997";
	}

Thread thread;
public void start() { thread = new Thread(this);
	thread.start();
	}

public void stop() { thread.stop(); }


public void destroy() {}
public void run() {
	while (true) 
	   {
	  try {Thread.currentThread().sleep(100); }
	  catch (InterruptedException ie) {}
	  if (!GraphComplete) 
		{ for (int i=0;i<5;i++) Move(); repaint(); }
	  }
	}

private TextField text1 = new TextField(9);
private TextField intext = new TextField(7);
private TextField text2 = new TextField(13);
private TextField inface = new TextField(7);
private TextArea programInfo = 
	new TextArea(archive.graphDispatch.DataBaseDescription(),5,20);
private Button loop = new Button("loop");
private Checkbox check_vertex = new Checkbox("vertices");
private Checkbox check_face = new Checkbox("faces");
private Checkbox check_flip = new Checkbox("flip");
private Checkbox freeze = new Checkbox("freeze");
private Choice familyChoice = new Choice();
private Choice incrementChoice = new Choice();

public void init()
	{
	String incChoices[] = {"100","25","5","1","-1","-5","-25","-100"};
	for (int i=0;i<incChoices.length;i++) 
		incrementChoice.addItem(incChoices[i]);

	String famChoices[]={"III","pents","hex","hept","oct"};
	for (int i=0;i<famChoices.length;i++)
		familyChoice.addItem(famChoices[i]);

	add(programInfo);
	add(incrementChoice); 	add(text1); 		add(intext);
	add(text2); 			add(inface);		add(freeze);
	add(loop); 				add(check_vertex); 	add(check_face);
	add(check_flip); 		add(familyChoice);  

	text1.setEditable(false);
	text2.setEditable(false);
	programInfo.setEditable(false);

	drawNumberVertex = drawNumberFace=false;
	setCoords(graphAllocator.grab(2),false);
	}

double coords[][];
//int graphNumber;
static java.util.Random t = new java.util.Random();
static boolean GraphComplete ;
static boolean drawNumberVertex;
static boolean drawNumberFace;

synchronized void setCoords(archive.GraphArrays gr,boolean overlay)
	{
	if (gr==null) return;
	GraphComplete=false;
	this.gr = gr;
	GBLregions = gr.GBLregions;
	boundary = gr.boundary;
	edges = gr.cycle;
	int i,j;
	if (!overlay)
	   {
	   coords = new double[edges.length][2];
	   for (i=0;i<edges.length;i++)
		{ coords[i][0]=t.nextDouble() -0.5;
			coords[i][1]=t.nextDouble() -0.5; }
	   graphAllocator.setBoundaryRegion();
	   }
	else if (coords.length != edges.length)
	   {
	   double [][] bak = coords;
	   coords = new double[edges.length][2];
	   int b = Math.min(bak.length,coords.length);
	   for (i=0;i<b;i++) { 
		  coords[i][0]=bak[i][0]; coords[i][1]=bak[i][1]; }
	   for (i=b;i<coords.length;i++)
		{ coords[i][0]=t.nextDouble() -0.5;
			coords[i][1]=t.nextDouble() -0.5; }
	   }
		
	int r[] = GBLregions[boundaryRegion];
	double N = r.length;
	for (i=0;i<r.length;i++)
		{
		coords[r[i]][0]=
			Math.cos(6.28319*i/N);
		coords[r[i]][1]=
			Math.sin(6.28319*i/N);
		}
	text1.setText("graph "+(graph.selectedIndex()+1));
	text2.setText("missing face");
	}

Stack terminal=null;
public synchronized boolean action(Event e,Object o)
	{
	if (e.target==loop)
		{
		System.out.println("\nStarting new loop");
		System.out.println("Stacks = "+tentative.size()+" "+preterminal.size());
		if (tentative.size()==0) return true;
		arrangeMain.discard = new arrangeAnnotate((arrange)tentative.peek());
		setCoords(arrangeMain.discard.makeGr(),false);
		repaint();
		arrangeMain.loop(tentative,preterminal,p);
		System.out.println(arrangeMain.discard.S);
		}
		
	if (e.target==freeze) 
		{
		if (freeze.getState()==false) GraphComplete=false;
		else GraphComplete=true;
		}
	if (e.target==intext)
		{
		int i;
		try {
		i = Integer.valueOf(intext.getText()).intValue();
			}
		catch (NumberFormatException u) { return true; }
		setCoords(graphAllocator.grab(i-1));
		/*
		if (terminal==null) { importGraph(i-1); repaint(); return true; } 
							// usr numbers differ.
		if ((i>=0)&&(i<terminal.size())) 
			{
			arrange a = (arrange)terminal.elementAt(i);
			setCoords(a.makeGr(),false);
			}
		*/
		repaint();
		}
	if (e.target==inface)
		{
		int i;
		try { i = Integer.valueOf(inface.getText()).intValue(); }
		catch (NumberFormatException u) { return true; }
		i--; // usr and java numbers differ;
		graphAllocator.setBoundaryRegion(i);
		GraphComplete=false;
		repaint();
		}
	if (e.target==check_vertex)
		{
		if (check_vertex.getState()==true) 
		drawNumberVertex=true;
		else drawNumberVertex=false;
		repaint();
		}
	if (e.target==check_face)
		{
		if (check_face.getState()==true) drawNumberFace=true;
		else drawNumberFace=false;
		repaint();
		}
	if (e.target==check_flip)
		{
		// flip
		arrangeInvariant q = new arrangeInvariant(gr);
		q.flip();
		gr = q.makeGr();
		setCoords(gr,true);
		repaint();
		}
	if (e.target==incrementChoice)
		{
		String S = incrementChoice.getSelectedItem();
		int j;
		try { j = Integer.parseInt(S);
				importGraph(graph.selectedIndex()+j); }
		catch (NumberFormatException ee) { System.out.println(ee.toString()); }
		}
	if (e.target==familyChoice)
		{
		int i = familyChoice.getSelectedIndex();
		switch (i) {
			case 0 : graph.use(null); break; 
			case 1 : case 2 : case 3 :
			case 4 : System.out.println("generating..."
						+familyChoice.getSelectedItem());
					terminal = arrangeMain.generateAll(4+i); 
					//arrange.dumpStack(terminal);
					if (terminal==null) break;
					if (terminal.size()==0) break;
					graph.use(terminal);
					setCoords(graph.grab(0)); break;
					/*
					arrange a = (arrange)terminal.elementAt(0);
					setCoords(a.makeGr(),false); break;
					*/
			}
		repaint();
		}
	return true;
	}



synchronized void Move()
	{
	double stepsize = 0.02;
	int i;
	double a[][],b[][],c[][];
	a = new double [GBLregions.length][];
	b = new double [GBLregions.length][];
	c = new double [GBLregions.length][];
	for (i=0;i<GBLregions.length;i++)
		{
		a[i] = new double[GBLregions[i].length];
		b[i] = new double[GBLregions[i].length];
		c[i] = new double[GBLregions[i].length];
		}
	int k,j0,j1,j2;
	int e[];
	int count =0;
	double total=0.0;
	for (k=0;k<GBLregions.length;k++)
	for (i=0;i<GBLregions[k].length;i++)
		{
		e = GBLregions[k];
		j2 = e[misc.mod(i+1 , e.length)];
		j1 = e[i];
		j0 = e[misc.mod(i+e.length-1, e.length)];
					// Use determinant to equalize areas:
					c[k][i] = (coords[j0][0]-coords[j1][0])*
						(coords[j2][1]-coords[j1][1]) -
						(coords[j2][0]-coords[j1][0])*
						(coords[j0][1]-coords[j1][1]);
		b[k][i] = coords[j0][1]-coords[j2][1];
		a[k][i] = coords[j2][0]-coords[j0][0];
		count ++;
		if (IsBoundary(j1)) 
			{
			count --;
			c[k][i]=b[k][i]=a[k][i]=0.0;
			}
		total += c[k][i];
		}
	double average = total/Math.max(1,count);
	double dx[]=new double[edges.length],
		dy[]= new double[edges.length];
	for (i=0;i<edges.length;i++)
		{ dx[i]=dy[i]=0.0; }
	for (k=0;k<GBLregions.length;k++)
	for (i=0;i<GBLregions[k].length;i++)
		{
		j1 = GBLregions[k][i];
		dx[j1] += (c[k][i]-average)*b[k][i];
		dy[j1] += (c[k][i]-average)*a[k][i];
		// July 97 correction:
		if (gr.faceCycle[j1].length==2) {
			for (int h=0;h<gr.faceCycle[j1].length;h++)
			{ int hface = gr.faceCycle[j1][h];
			for (int h2=0;h2<GBLregions[hface].length;h2++)
			  {
			  int h3 = GBLregions[hface][h2];
			  dx[j1] += (coords[j1][0]-coords[h3][0]);
			  dy[j1] += (coords[j1][1]-coords[h3][1]);
			  }
			}}
		}
	for (i=0;i<edges.length;i++)
		{
		coords[i][0] -= stepsize*dx[i];
		coords[i][1] -= stepsize*dy[i];
		}
	// check vertices on the boundary.
	int r[] = GBLregions[boundaryRegion];
	double t1,t2;
	double N = Math.max(1,r.length);
	for (i=0;i<r.length;i++)
		{
		t1 = Math.cos(6.28319*i/N);
		t2 = Math.sin(6.28319*i/N);
		coords[r[i]][0]=t1;
		coords[r[i]][1]=t2;
		}
	}


public void paint( Graphics g)
	{
	int i,j;
	for (i=0;i<boundary.length;i++)
		{
		j = boundary[i];
		if (j!=boundaryRegion) { render.drawFace(g,j,GBLregions,coords); }
		else render.markFace(g);
		}
	if (drawNumberFace) for (i=0;i<GBLregions.length;i++)
		render.numberFace(g,i,GBLregions,coords,boundaryRegion); 
	for (i=0;i<edges.length;i++)
	for (j=0;j<edges[i].length;j++)
		{
		if (i<edges[i][j]) render.drawEdge(g,i,edges[i][j],coords);
		}
	for (i=0;i<edges.length;i++)
		render.drawDot(g,i,coords,drawNumberVertex);
	}



/* for viewing stacks stuff */
static Stack tentative;
static Stack preterminal;
parameterUse p = new parameterUse(7);
static 
	{
	tentative = new Stack();
	preterminal = new Stack();
	tentative.push(new arrangePlus(arrange.makeNgon(5)));
	}

} /* end of renderGraph */






/* supplementary stuff */


class render {

final static int centerx=170,centery=350,width=140;

static int xcord(double t) { return (int) (centerx + width*t); }
static int ycord(double t) { return (int) (centery + width*t); }

static void drawEdge(Graphics g,int i,int j,double xy[][])
	{
	g.setColor(Color.black);
	g.drawLine(xcord(xy[i][0]),ycord(xy[i][1]),
		xcord(xy[j][0]),ycord(xy[j][1]));
	}

static void drawDot(Graphics g,int i,double xy[][],boolean drawNumber)
	{
	g.setColor(Color.blue);
	int x = xcord(xy[i][0]), y = ycord(xy[i][1]);
	g.fillOval(x-5,y-5,10,10);
	if (drawNumber) g.drawString(" "+(i+1),x+3,y+3);
	}

static void drawFace(Graphics g,int i,int region[][],double xy[][])
	{
	g.setColor(Color.yellow);
	Polygon p = new Polygon();
	int r[] = region[i];
	for (int j=0;j<r.length;j++)
	  p.addPoint(xcord(xy[r[j]][0]),ycord(xy[r[j]][1]));
	g.fillPolygon(p);
	}

static void markFace(Graphics g)
	{
	g.setColor(Color.yellow);
	g.fillRect(xcord(1.0)-15,ycord(1.0)-15,15,15);
	}


static void numberFace(Graphics g, int i,int region[][],double xy[][],int bd)
	{
	g.setColor(Color.black);
	int r[]= region[i];
	double x=0,y=0;
	for (int j=0;j<r.length;j++)
		{ x += xy[r[j]][0]; y+= xy[r[j]][1]; } 
	x /= r.length; y /= r.length;
	if (i==bd) { x = 1.0; y= 1.0; }
	g.drawString(" "+(i+1),xcord(x)-10,ycord(y));
	}
}







class graph {
	Stack InUse = null;
	index = 0;
	GraphArrays gr;
	int selectedIndex() { return index; }
	void use(Stack A) { InUse = A; }
	archive.GraphArrays grab(int i)
		{
		if (InUse!=null)
			{
			if ((i>=0)&&(i<InUse.size())
				{
				arrange a = (arrange)InUse.elementAt(i);
				index =i;
				return a.makeGr();
				}
			else return null;
			}
		return archive.graphDispatch.grab(i);
		}

	int boundaryRegion;
	void setBoundaryRegion(int i)
	{
	if ((i>=0)&&(i<gr.GBLregions.length)) boundaryRegion=i;
	}

	private void setBoundaryRegionWithTemp()
		{
		if (boundary.length==0) { setBoundaryRegion(); return; }
		int i,j,pos=0,t,temp=-1;
		for (j=0;j<boundary.length;j++)
			{
			i = boundary[j];
						t = gr.GBLregions[i].length;
						if (t >temp)
								{
								pos = i;
								temp = t;
								}
						}
				boundaryRegion = pos;
				}

	void setBoundaryRegion()
		{
		/*
		if (boundary.length>0) 
			{ setBoundaryRegionWithTemp(); return;}
		*/
		int i,pos=0,t,temp=-1;
		for (i=0;i<gr.GBLregions.length;i++)
			{
			t = gr.GBLregions[i].length;
			if (t >temp)
				{
				pos = i;
				temp = t;
				}
			}
		boundaryRegion = pos;
		}

	boolean IsBoundary(int vertex)
		{
		for (int i=0;i<gr.GBLregions[boundaryRegion].length;i++)
			if (vertex==gr.GBLregions[boundaryRegion][i])
			return true;
	return false;
	}

/*
	synchronized GraphArrays importGraph(int userGraphNumber)
		{
		archive.GraphArrays gr = archive.graphDispatch.grab(userGraphNumber);
		if (null == gr) return;
		setCoords(gr,false);
		}
*/
	}


/* CUT: 
	if (e.target==inEdge)
		{
		int f,v1,v2;
		int tokarray[]= new int[4];
		String s = inEdge.getText();
		StringTokenizer Token = new StringTokenizer(s);
		int L = Token.countTokens();
		if (L==4) {
		for (int i=0;i<L;i++)
					  tokarray[i]=Integer.valueOf(
			Token.nextToken()).intValue();
		f = tokarray[0]-1; 
		v1=tokarray[1]-1; v2=tokarray[2]-1;
		arrange q = new arrange(gr);
		arrange.face F = (arrange.face) 
			q.faceList.elementAt(f);
		arrange.vertex V1 = (arrange.vertex)
			q.vertexList.elementAt(v1);
		arrange.vertex V2 = (arrange.vertex)
			q.vertexList.elementAt(v2);
		int index1 = F.incidentVertex.indexOf(V1);
		int index2 = F.incidentVertex.indexOf(V2);
		q.divideBoundary(index1,index2,F,tokarray[3]);
		setCoords(q.makeGr(),true);
		repaint();
		}
		}

*/
