head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.09.19.21.31.13;	author hales;	state Exp;
branches;
next	;


desc
@Sphere Packings IV,
octagons with a pentagonal polygonal hull
containing a lopsided upright figure
Needless to say there were very few possibilities, and
the cplex file ruled them out immediately.
@


1.1
log
@Initial revision
@
text
@/* parameters.java was changed to the following.
These are octagons with a lopsided figure, for which the octagon
has a pentagonal hull.
    protected final static int
        fixedSquanderFace[]={0,0,0,0,2378,10120,10120,10120,11668};
    protected final static int
        fixedScoreFace[] ={1000,1000,1000,1000,0,-6830,-7830,-7830,-7830}
From this file a lopsided58.m was produced in the cplex directory
*/
// generating...pent
// stack sizes = 5 0
// cases considered= 1000
// stack sizes = 6 2
// cases considered= 2000
// stack sizes = 8 3
// cases considered= 3000
// stack sizes = 3 3
// cases considered= 4000
// stack sizes = 6 5
// cases considered= 5000
// stack sizes = 6 8
// cases considered= 6000
// stack sizes = 3 9
// cases considered= 7000
// stack sizes = 7 11
// cases considered= 8000
// stack sizes = 10 13
// cases considered= 9000
// stack sizes = 12 18
// cases considered= 10000
// stack sizes = 6 18
// cases considered= 11000
// stack sizes = 7 18
// cases considered= 12000
// stack sizes = 8 19
// cases considered= 13000
// stack sizes = 12 19
// cases considered= 14000
// stack sizes = 6 19
// cases considered= 15000
// stack sizes = 17 21
// cases considered= 16000
// stack sizes = 6 23
// cases considered= 17000
// stack sizes = 22 24
// cases considered= 18000
// stack sizes = 6 24
// cases considered= 19000
// stack sizes = 7 24
// cases considered= 20000
// stack sizes = 6 24
// cases considered= 21000
// stack sizes = 15 25
// cases considered= 22000
// stack sizes = 3 25
// cases considered= 23000
// stack sizes = 14 25
// cases considered= 24000
// stack sizes = 17 25
// cases considered= 25000
// stack sizes = 4 25
// cases considered= 26000
// stack sizes = 5 25
// cases considered= 27000
// stack sizes = 13 26
// cases considered= 28000
// stack sizes = 22 26
// cases considered= 29000
// stack sizes = 15 26
// cases considered= 30000
// Total pops: 30774
//stack size = 26
//count = 30774
public class lopsided58 {
final static String data[] = {

" 0 17  5 5 10 9 3 4 4 5 4 0 1 3 0 4 3 3 0 3 2 3 2 3 8 3 8 3 9 3 8 9 11 3 11 9 10 3 11 10 6 3 6 10 5 3 6 5 1 3 6 1 7 3 11 6 7 3 8 11 7 3 2 8 7 3 1 0 2 3 2 7 1",

" 0 17  5 4 8 3 0 1 4 4 1 5 10 3 5 1 2 3 2 1 0 3 2 0 3 3 2 3 6 3 5 2 6 3 6 3 7 3 7 3 8 3 7 8 9 3 9 8 4 3 9 4 10 3 9 10 11 3 7 9 11 3 6 7 11 3 11 10 5 3 5 6 11",

" 0 17  5 11 6 1 7 8 4 11 8 9 10 3 9 8 3 3 3 8 2 3 2 8 7 3 2 7 1 3 2 1 0 3 3 2 0 3 0 1 5 3 5 1 6 3 5 6 10 3 6 11 10 3 5 10 4 3 4 10 9 3 0 5 4 3 4 9 3 3 3 0 4",

" 0 17  5 7 1 0 2 3 3 7 3 8 4 8 3 4 9 3 4 3 0 3 3 2 0 3 4 0 5 3 5 0 1 3 5 1 6 3 6 1 7 3 6 7 11 3 11 7 8 3 11 8 9 3 9 4 10 3 10 4 5 3 10 5 6 3 10 6 11 3 11 9 10",

" 0 19  5 9 7 2 8 3 3 9 3 10 4 10 3 0 4 3 0 3 2 3 3 8 2 3 0 2 1 3 1 2 7 3 1 7 6 3 6 7 12 3 12 7 9 3 12 9 10 3 12 10 11 3 11 10 4 3 6 12 11 3 4 0 5 3 5 0 1 3 5 1 6 3 11 4 5 3 5 6 11",

" 0 17  5 0 4 10 9 3 3 0 3 2 4 2 3 8 7 3 8 3 9 3 8 9 10 3 8 10 11 3 7 8 11 3 11 10 5 3 5 10 4 3 5 4 1 3 1 4 0 3 1 0 2 3 1 2 6 3 6 2 7 3 5 1 6 3 11 5 6 3 6 7 11",

" 0 17  5 9 4 10 5 6 3 9 6 11 4 11 6 1 7 3 1 6 5 3 1 5 0 3 0 5 4 3 5 10 4 3 0 4 3 3 3 4 9 3 3 9 8 3 8 9 11 3 8 11 7 3 7 1 2 3 2 1 0 3 2 0 3 3 2 3 8 3 8 7 2",

" 0 17  5 5 1 6 11 10 3 5 10 4 4 4 10 9 3 3 9 10 11 3 9 11 8 3 8 11 7 3 7 11 6 3 7 6 1 3 7 1 2 3 8 7 2 3 2 1 0 3 0 1 5 3 0 5 4 3 0 4 3 3 2 0 3 3 3 9 8 3 8 2 3",

" 0 17  5 8 2 0 3 9 3 8 9 7 4 7 9 11 6 3 11 9 10 3 10 9 3 3 10 3 4 3 4 3 0 3 4 0 1 3 1 0 2 3 1 2 6 3 7 6 2 3 6 11 5 3 2 8 7 3 1 6 5 3 4 1 5 3 10 4 5 3 5 11 10",

" 0 17  5 2 3 9 11 8 3 2 8 7 3 7 8 11 3 7 11 6 4 6 11 10 5 3 10 11 9 3 10 9 4 3 4 9 3 3 4 3 0 3 0 3 2 3 0 2 1 3 1 2 7 3 1 7 6 3 1 6 5 3 0 1 5 3 4 0 5 3 5 10 4",

" 0 17  5 4 5 10 8 9 3 4 9 3 3 3 9 8 3 3 8 2 4 2 8 11 7 3 11 8 10 3 11 10 6 3 6 10 5 3 6 5 1 3 1 5 0 3 0 5 4 3 0 4 3 3 0 3 2 3 1 0 2 3 1 2 7 3 6 1 7 3 7 11 6",

" 0 17  5 5 9 4 0 1 3 5 1 2 3 2 1 0 3 2 0 3 3 3 0 4 3 3 4 7 3 7 4 8 3 8 4 9 3 8 9 10 3 10 9 5 3 10 5 6 3 6 5 2 3 6 2 3 4 6 3 7 11 3 10 6 11 3 8 10 11 3 11 7 8",

" 0 17  5 4 10 11 8 9 3 4 9 3 3 3 9 8 3 3 8 2 3 2 8 7 3 7 8 11 3 7 11 10 3 7 10 6 3 6 10 5 3 5 10 4 3 5 4 0 3 0 4 3 3 0 3 2 3 0 2 1 4 1 2 7 6 3 5 0 1 3 1 6 5",

" 0 17  5 8 3 4 9 11 3 8 11 10 3 10 11 9 3 10 9 6 3 6 9 5 3 5 9 4 3 5 4 0 3 0 4 3 3 0 3 2 3 2 3 8 3 2 8 7 3 7 8 10 3 7 10 6 4 2 7 6 1 3 1 6 5 3 1 5 0 3 0 2 1",

" 0 17  5 8 3 4 9 11 3 8 11 10 3 10 11 9 3 10 9 6 3 6 9 5 3 5 9 4 3 5 4 0 3 0 4 3 3 0 3 2 3 2 3 8 3 2 8 7 3 7 8 10 3 7 10 6 3 7 6 1 4 1 6 5 0 3 1 0 2 3 2 7 1",

" 0 17  5 5 6 8 9 11 3 5 11 10 3 10 11 9 3 10 9 3 3 3 9 2 3 2 9 8 3 2 8 7 3 7 8 6 3 7 6 1 3 1 6 5 3 1 5 4 3 4 5 10 3 4 10 3 3 4 3 0 3 0 3 2 4 0 2 7 1 3 1 4 0",

" 0 18  5 3 9 11 7 8 3 3 8 2 3 2 8 7 3 2 7 1 3 1 7 6 3 6 7 11 3 6 11 10 3 10 11 9 3 10 9 4 3 4 9 3 3 4 3 0 3 0 3 2 3 0 2 1 3 0 1 5 3 5 1 6 3 5 6 10 3 5 10 4 3 4 0 5",

" 0 19  5 1 2 8 11 7 3 1 7 6 3 6 7 11 3 6 11 10 3 10 11 12 3 12 11 8 3 12 8 9 3 9 8 3 3 3 8 2 3 3 2 0 3 0 2 1 3 0 1 5 3 5 1 6 3 5 6 10 3 5 10 4 4 4 10 12 9 3 0 5 4 3 3 0 4 3 4 9 3",

" 0 17  5 11 5 1 6 7 3 11 7 8 3 8 7 2 3 2 7 1 3 7 6 1 3 2 1 0 3 0 1 5 3 0 5 4 3 4 5 11 3 4 11 10 3 10 11 8 3 10 8 9 3 9 8 2 4 9 2 0 3 3 3 0 4 3 3 4 10 3 10 9 3",

" 0 16  5 0 1 2 3 4 3 0 4 5 3 5 4 6 3 6 4 3 3 6 3 7 3 7 3 2 3 7 2 8 3 8 2 1 3 8 1 9 3 9 1 0 3 9 0 5 3 9 5 10 3 10 5 6 3 10 6 7 3 10 7 8 3 8 9 10",

" 0 17  5 7 11 6 1 2 3 7 2 3 3 3 2 0 3 0 2 1 3 0 1 5 3 5 1 6 3 5 6 10 3 10 6 11 3 10 11 9 3 9 11 7 3 9 7 8 3 8 7 3 4 8 3 0 4 3 4 0 5 3 4 5 10 3 4 10 9 3 9 8 4",

" 0 19  5 10 3 4 5 11 3 10 11 12 3 12 11 6 3 6 11 5 3 6 5 1 3 1 5 0 3 0 5 4 3 0 4 3 3 0 3 2 3 2 3 10 3 2 10 9 3 9 10 12 3 9 12 7 3 7 12 6 3 7 6 1 3 7 1 8 4 8 1 0 2 3 8 2 9 3 9 7 8",

" 0 17  5 0 1 2 3 4 3 0 4 5 3 5 4 6 3 6 4 3 3 6 3 7 3 7 3 8 3 8 3 2 3 8 2 1 3 8 1 9 3 9 1 10 3 10 1 0 3 10 0 5 3 10 5 11 3 11 5 6 3 11 6 7 4 11 7 8 9 3 9 10 11",

" 0 19  5 7 12 10 4 11 3 7 11 6 3 6 11 5 3 5 11 4 3 5 4 0 3 0 4 3 3 3 4 10 3 3 10 9 3 9 10 12 3 9 12 8 3 8 12 7 3 8 7 1 3 1 7 6 4 1 6 5 0 3 1 0 2 3 2 0 3 3 2 3 9 3 2 9 8 3 8 1 2",

" 0 19  5 0 1 2 3 4 3 0 4 5 3 5 4 6 3 6 4 7 3 7 4 3 3 7 3 8 4 8 3 2 1 3 8 1 9 3 9 1 10 3 10 1 0 3 10 0 5 3 10 5 11 3 11 5 6 3 9 10 11 3 11 6 12 3 12 6 7 3 12 7 8 3 12 8 9 3 9 11 12",

" 0 17  5 0 1 2 3 4 3 0 4 5 3 5 4 6 3 6 4 7 3 7 4 3 3 7 3 8 3 8 3 9 3 9 3 2 3 9 2 10 3 10 2 0 3 2 1 0 3 10 0 5 3 10 5 11 3 11 5 6 4 11 6 7 8 3 9 10 11 3 11 8 9"};

};
//Generator complete. All 5-gons determined
@
