head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	97.09.19.21.32.24;	author hales;	state Exp;
branches;
next	;


desc
@Sphere Packings IV,
pentagons and hexagons containing a upright lopsided figure.
The parameters.java were changed as the lopsided.java file indicates.
Very few possibilities were produced, and cplex ruled them out quickly
@


1.1
log
@Initial revision
@
text
@/*
//parameters.java:

// Put pass dependent constraints here.
// Kepler conjecture parameters

class parameters {
	final static int vertexCountMin = 1; // There must be at least this many
	final static int vertexCountMax = 100; // And at most this many vertices.
	final static int faceCountMaxAtExceptionalVertex= 5; 
			// This is the maximum number
			// of faces that can be at a face with something
			// with an exceptional face.
	final static int faceCountMax = 6;

	// values multiplied by 1000 and rounded down to nearest integer;
	protected final static int 
		fixedSquanderFace[]={0,0,0,0,2378,10120,10120,10120,11668};
	protected final static int 
		fixedScoreFace[] ={1000,1000,1000,1000,0,-7830,-7830,-7830,-7830};
	final static int squanderTarget = 14800;
// THE rest of parameters.java was left unchanged.
// Pent and Hex cases were generated below:

// generating...pent
// stack sizes = 5 0
// cases considered= 1000
// stack sizes = 6 0
// cases considered= 2000
// stack sizes = 8 0
// cases considered= 3000
// stack sizes = 3 0
// cases considered= 4000
// stack sizes = 6 1
// cases considered= 5000
// stack sizes = 6 1
// cases considered= 6000
// stack sizes = 3 1
// cases considered= 7000
// stack sizes = 7 1
// cases considered= 8000
// stack sizes = 10 1
// cases considered= 9000
// stack sizes = 12 3
// cases considered= 10000
// stack sizes = 6 3
// cases considered= 11000
// stack sizes = 7 3
// cases considered= 12000
// stack sizes = 8 3
// cases considered= 13000
// stack sizes = 12 3
// cases considered= 14000
// stack sizes = 6 3
// cases considered= 15000
// stack sizes = 17 3
// cases considered= 16000
// stack sizes = 6 4
// cases considered= 17000
// stack sizes = 22 5
// cases considered= 18000
// stack sizes = 6 5
// cases considered= 19000
// stack sizes = 7 5
// cases considered= 20000
// stack sizes = 6 5
// cases considered= 21000
// stack sizes = 15 6
// cases considered= 22000
// stack sizes = 3 6
// cases considered= 23000
// stack sizes = 14 6
// cases considered= 24000
// stack sizes = 17 6
// cases considered= 25000
// stack sizes = 4 6
// cases considered= 26000
// stack sizes = 5 6
// cases considered= 27000
// stack sizes = 13 6
// cases considered= 28000
// stack sizes = 22 6
// cases considered= 29000
// stack sizes = 15 6
// cases considered= 30000
// Total pops: 30774
stack size = 6
count = 30774

*/
public class lopsided {
final static String data[] = {

" 0 19  5 9 7 2 8 3 3 9 3 10 4 10 3 0 4 3 0 3 2 3 3 8 2 3 0 2 1 3 1 2 7 3 1 7 6 3 6 7 12 3 12 7 9 3 12 9 10 3 12 10 11 3 11 10 4 3 6 12 11 3 4 0 5 3 5 0 1 3 5 1 6 3 11 4 5 3 5 6 11",

" 0 18  5 3 9 11 7 8 3 3 8 2 3 2 8 7 3 2 7 1 3 1 7 6 3 6 7 11 3 6 11 10 3 10 11 9 3 10 9 4 3 4 9 3 3 4 3 0 3 0 3 2 3 0 2 1 3 0 1 5 3 5 1 6 3 5 6 10 3 5 10 4 3 4 0 5",

" 0 19  5 1 2 8 11 7 3 1 7 6 3 6 7 11 3 6 11 10 3 10 11 12 3 12 11 8 3 12 8 9 3 9 8 3 3 3 8 2 3 3 2 0 3 0 2 1 3 0 1 5 3 5 1 6 3 5 6 10 3 5 10 4 4 4 10 12 9 3 0 5 4 3 3 0 4 3 4 9 3",

" 0 19  5 10 3 4 5 11 3 10 11 12 3 12 11 6 3 6 11 5 3 6 5 1 3 1 5 0 3 0 5 4 3 0 4 3 3 0 3 2 3 2 3 10 3 2 10 9 3 9 10 12 3 9 12 7 3 7 12 6 3 7 6 1 3 7 1 8 4 8 1 0 2 3 8 2 9 3 9 7 8",

" 0 19  5 7 12 10 4 11 3 7 11 6 3 6 11 5 3 5 11 4 3 5 4 0 3 0 4 3 3 3 4 10 3 3 10 9 3 9 10 12 3 9 12 8 3 8 12 7 3 8 7 1 3 1 7 6 4 1 6 5 0 3 1 0 2 3 2 0 3 3 2 3 9 3 2 9 8 3 8 1 2",

" 0 19  5 0 1 2 3 4 3 0 4 5 3 5 4 6 3 6 4 7 3 7 4 3 3 7 3 8 4 8 3 2 1 3 8 1 9 3 9 1 10 3 10 1 0 3 10 0 5 3 10 5 11 3 11 5 6 3 9 10 11 3 11 6 12 3 12 6 7 3 12 7 8 3 12 8 9 3 9 11 12",

// Generator complete. All 5-gons determined

// generating...hex
// stack sizes = 15 1
// cases considered= 1000
// stack sizes = 14 1
// cases considered= 2000
// stack sizes = 9 1
// cases considered= 3000
// stack sizes = 11 1
// cases considered= 4000
// stack sizes = 12 4
// cases considered= 5000
// stack sizes = 9 6
// cases considered= 6000
// stack sizes = 12 8
// cases considered= 7000
// stack sizes = 11 8
// cases considered= 8000
// stack sizes = 8 8
// cases considered= 9000
// stack sizes = 11 9
// cases considered= 10000
// stack sizes = 11 9
// cases considered= 11000
// stack sizes = 9 9
// cases considered= 12000
// stack sizes = 7 9
// cases considered= 13000
// stack sizes = 12 10
// cases considered= 14000
// stack sizes = 9 12
// cases considered= 15000
// stack sizes = 11 15
// cases considered= 16000
// stack sizes = 14 18
// cases considered= 17000
// stack sizes = 10 23
// cases considered= 18000
// stack sizes = 6 29
// cases considered= 19000
// stack sizes = 8 29
// cases considered= 20000
// stack sizes = 8 29
// cases considered= 21000
// stack sizes = 7 29
// cases considered= 22000
// stack sizes = 10 29
// cases considered= 23000
// stack sizes = 10 29
// cases considered= 24000
// stack sizes = 15 29
// cases considered= 25000
// stack sizes = 15 30
// cases considered= 26000
// stack sizes = 14 30
// cases considered= 27000
// stack sizes = 10 30
// cases considered= 28000
// stack sizes = 12 32
// cases considered= 29000
// stack sizes = 9 33
// cases considered= 30000
// stack sizes = 11 33
// cases considered= 31000
// stack sizes = 9 33
// cases considered= 32000
// stack sizes = 9 34
// cases considered= 33000
// stack sizes = 10 34
// cases considered= 34000
// stack sizes = 12 34
// cases considered= 35000
// stack sizes = 12 34
// cases considered= 36000
// stack sizes = 9 34
// cases considered= 37000
// stack sizes = 5 35
// cases considered= 38000
// stack sizes = 18 35
// cases considered= 39000
// stack sizes = 6 36
// cases considered= 40000
// stack sizes = 6 36
// cases considered= 41000
// stack sizes = 12 37
// cases considered= 42000
// stack sizes = 4 41
// cases considered= 43000
// stack sizes = 11 41
// cases considered= 44000
// stack sizes = 8 44
// cases considered= 45000
// stack sizes = 9 44
// cases considered= 46000
// stack sizes = 12 48
// cases considered= 47000
// stack sizes = 16 48
// cases considered= 48000
// stack sizes = 16 48
// cases considered= 49000
// stack sizes = 16 48
// cases considered= 50000
// stack sizes = 15 48
// cases considered= 51000
// stack sizes = 14 48
// cases considered= 52000
// stack sizes = 18 48
// cases considered= 53000
// stack sizes = 13 48
// cases considered= 54000
// stack sizes = 11 48
// cases considered= 55000
// stack sizes = 6 48
// cases considered= 56000
// stack sizes = 9 48
// cases considered= 57000
// stack sizes = 9 48
// cases considered= 58000
// stack sizes = 14 48
// cases considered= 59000
// stack sizes = 18 48
// cases considered= 60000
// stack sizes = 8 48
// cases considered= 61000
// stack sizes = 8 48
// cases considered= 62000
// stack sizes = 13 48
// cases considered= 63000
// stack sizes = 14 48
// cases considered= 64000
// stack sizes = 6 48
// cases considered= 65000
// stack sizes = 6 49
// cases considered= 66000
// stack sizes = 15 49
// cases considered= 67000
// stack sizes = 10 50
// cases considered= 68000
// stack sizes = 9 50
// cases considered= 69000
// stack sizes = 10 50
// cases considered= 70000
// stack sizes = 16 50
// cases considered= 71000
// stack sizes = 13 50
// cases considered= 72000
// stack sizes = 6 51
// cases considered= 73000
// stack sizes = 8 52
// cases considered= 74000
// stack sizes = 15 52
// cases considered= 75000
// stack sizes = 3 52
// cases considered= 76000
// stack sizes = 15 53
// cases considered= 77000
// stack sizes = 11 53
// cases considered= 78000
// stack sizes = 5 55
// cases considered= 79000
// stack sizes = 18 57
// cases considered= 80000
// stack sizes = 10 57
// cases considered= 81000
// stack sizes = 13 57
// cases considered= 82000
// stack sizes = 6 57
// cases considered= 83000
// stack sizes = 10 57
// cases considered= 84000
// stack sizes = 20 57
// cases considered= 85000
// stack sizes = 6 57
// cases considered= 86000
// stack sizes = 13 57
// cases considered= 87000
// stack sizes = 5 57
// cases considered= 88000
// stack sizes = 14 57
// cases considered= 89000
// stack sizes = 17 57
// cases considered= 90000
// stack sizes = 12 57
// cases considered= 91000
// stack sizes = 9 57
// cases considered= 92000
// stack sizes = 7 57
// cases considered= 93000
// stack sizes = 14 57
// cases considered= 94000
// stack sizes = 8 57
// cases considered= 95000
// stack sizes = 11 57
// cases considered= 96000
// stack sizes = 12 57
// cases considered= 97000
// stack sizes = 11 57
// cases considered= 98000
// stack sizes = 10 57
// cases considered= 99000
// stack sizes = 7 58
// cases considered= 100000
// stack sizes = 15 59
// cases considered= 101000
// stack sizes = 17 59
// cases considered= 102000
// stack sizes = 12 59
// cases considered= 103000
// stack sizes = 19 59
// cases considered= 104000
// stack sizes = 5 59
// cases considered= 105000
// stack sizes = 14 59
// cases considered= 106000
// stack sizes = 9 59
// cases considered= 107000
// stack sizes = 14 59
// cases considered= 108000
// stack sizes = 9 59
// cases considered= 109000
// stack sizes = 11 59
// cases considered= 110000
// stack sizes = 11 59
// cases considered= 111000
// stack sizes = 22 59
// cases considered= 112000
// stack sizes = 9 59
// cases considered= 113000
// stack sizes = 10 59
// cases considered= 114000
// stack sizes = 13 59
// cases considered= 115000
// stack sizes = 5 59
// cases considered= 116000
// stack sizes = 10 59
// cases considered= 117000
// stack sizes = 6 59
// cases considered= 118000
// stack sizes = 16 59
// cases considered= 119000
// stack sizes = 8 59
// cases considered= 120000
// stack sizes = 16 59
// cases considered= 121000
// stack sizes = 5 59
// cases considered= 122000
// stack sizes = 7 59
// cases considered= 123000
// stack sizes = 20 59
// cases considered= 124000
// stack sizes = 6 59
// cases considered= 125000
// stack sizes = 12 59
// cases considered= 126000
// stack sizes = 15 59
// cases considered= 127000
// stack sizes = 7 59
// cases considered= 128000
// stack sizes = 6 59
// cases considered= 129000
// stack sizes = 17 59
// cases considered= 130000
// stack sizes = 14 59
// cases considered= 131000
// stack sizes = 5 59
// cases considered= 132000
// stack sizes = 10 59
// cases considered= 133000
// stack sizes = 10 59
// cases considered= 134000
// stack sizes = 18 59
// cases considered= 135000
// stack sizes = 16 59
// cases considered= 136000
// stack sizes = 4 59
// cases considered= 137000
// Total pops: 137562
// stack size = 59
// count = 137562
// public class graphUNKNOWN {
// final static String data[] = {

" 0 18  6 11 7 8 3 9 12 4 11 12 9 10 3 10 9 4 3 4 9 3 3 4 3 0 3 0 3 2 3 2 3 8 3 2 8 7 3 2 7 1 3 0 2 1 3 1 7 6 3 6 7 11 3 6 11 10 3 6 10 5 3 5 10 4 3 5 4 0 3 5 0 1 3 1 6 5",

" 0 18  6 12 10 4 0 5 11 4 12 11 6 7 3 6 11 5 3 6 5 1 3 1 5 0 3 1 0 2 3 2 0 3 3 3 0 4 3 3 4 9 3 9 4 10 3 9 10 12 3 9 12 8 3 8 12 7 3 3 9 8 3 2 3 8 3 2 8 7 3 1 2 7 3 7 6 1",

" 0 18  6 11 9 10 4 0 5 4 11 5 1 6 3 1 5 0 3 1 0 2 3 2 0 3 3 3 0 4 3 3 4 8 3 8 4 9 3 4 10 9 3 8 9 12 3 12 9 11 3 12 11 6 3 12 6 7 3 8 12 7 3 3 8 7 3 2 3 7 3 6 1 2 3 2 7 6",

" 0 18  6 10 12 9 4 0 5 4 10 5 1 6 3 1 5 0 3 1 0 2 3 2 0 3 3 3 0 4 3 3 4 8 3 8 4 9 3 8 9 11 3 11 9 10 3 9 12 10 3 11 10 6 3 11 6 7 3 8 11 7 3 3 8 7 3 2 3 7 3 6 1 2 3 2 7 6",

" 0 18  6 0 4 11 9 10 3 4 0 3 7 2 3 7 3 8 3 8 3 9 3 3 10 9 3 8 9 11 3 8 11 12 3 7 8 12 3 12 11 5 3 5 11 4 3 5 4 1 3 1 4 0 3 1 0 2 3 1 2 6 3 5 1 6 3 12 5 6 3 6 2 7 3 7 12 6",

" 0 18  6 6 11 4 0 5 1 4 6 1 7 12 3 7 1 2 3 2 1 0 3 1 5 0 3 2 0 3 3 3 0 4 3 3 4 9 3 9 4 10 3 10 4 11 3 10 11 6 3 10 6 12 3 9 10 12 3 9 12 8 3 8 12 7 3 3 9 8 3 2 3 8 3 8 7 2",

" 0 18  6 11 6 7 8 12 10 4 11 10 4 5 3 4 10 9 3 9 10 12 3 9 12 8 3 9 8 3 3 4 9 3 3 3 8 2 3 2 8 7 3 2 7 1 3 1 7 6 3 1 6 5 3 6 11 5 3 1 5 0 3 0 5 4 3 0 4 3 3 0 3 2 3 2 1 0",

" 0 18  6 6 1 0 2 7 11 4 6 11 10 5 3 10 11 12 3 12 11 7 3 12 7 8 3 8 7 2 3 8 2 3 3 3 2 0 3 3 0 4 3 4 0 5 3 5 0 1 3 4 5 10 3 1 6 5 3 4 10 9 3 9 10 12 3 9 12 8 3 9 8 3 3 3 4 9",

" 0 18  6 9 10 4 5 11 12 4 9 12 8 3 3 8 12 7 3 7 12 6 3 6 12 11 3 6 11 5 3 6 5 1 3 7 6 1 3 1 5 0 3 0 5 4 3 0 4 3 3 9 3 4 3 0 3 2 3 4 10 9 3 2 3 8 3 1 0 2 3 2 8 7 3 7 1 2",

" 0 18  6 1 0 2 6 11 5 3 0 1 5 4 0 5 10 4 3 10 5 11 3 10 11 9 3 9 11 12 3 12 11 6 3 12 6 7 3 7 6 2 3 7 2 3 3 3 2 0 3 3 0 4 3 3 4 8 3 7 3 8 3 12 7 8 3 9 12 8 3 4 10 9 3 9 8 4",

" 0 18  6 6 1 7 12 11 5 3 1 6 5 4 1 5 4 0 3 4 5 10 3 10 5 11 3 10 11 12 3 10 12 9 3 4 10 9 3 9 12 8 3 8 12 7 3 8 7 2 3 2 7 1 3 2 1 0 3 2 0 3 3 8 2 3 3 9 8 3 3 3 0 4 3 4 9 3",

" 0 18  6 6 1 7 12 11 5 3 1 6 5 3 1 5 0 4 0 5 10 4 3 10 5 11 3 10 11 12 3 10 12 9 3 4 10 9 3 9 12 8 3 8 12 7 3 8 7 2 3 2 7 1 3 2 1 0 3 2 0 3 3 3 0 4 3 8 2 3 3 9 8 3 3 3 4 9",

" 0 18  6 5 6 11 4 0 1 3 6 5 1 3 6 1 7 4 7 1 2 8 3 2 1 0 3 2 0 3 3 3 0 4 3 3 4 10 3 10 4 11 3 10 11 12 3 12 11 7 3 11 6 7 3 12 7 8 3 8 2 9 3 9 2 3 3 9 3 10 3 9 10 12 3 12 8 9",

" 0 18  6 7 8 6 1 0 2 3 8 7 2 3 8 2 9 4 9 2 3 10 3 3 2 0 3 3 0 4 3 4 0 5 3 5 0 1 3 5 1 6 3 5 6 11 3 4 5 11 3 11 6 12 3 12 6 8 3 12 8 9 3 12 9 10 3 11 12 10 3 10 3 4 3 4 11 10",

" 0 18  6 12 10 5 6 8 11 3 10 12 11 3 10 11 9 3 9 11 8 3 9 8 3 4 3 8 7 2 3 7 8 6 3 7 6 1 3 1 6 5 3 1 5 0 3 0 5 4 3 4 5 10 3 4 10 9 3 4 9 3 3 0 4 3 3 0 3 2 3 1 0 2 3 2 7 1",

" 0 18  6 11 4 5 12 9 10 3 4 11 10 3 4 10 3 3 3 10 9 3 3 9 2 3 2 9 8 3 8 9 12 3 8 12 6 3 6 12 5 3 6 5 1 3 1 5 0 3 0 5 4 3 0 4 3 3 0 3 2 4 1 0 2 7 3 7 2 8 3 7 8 6 3 6 1 7",

" 0 18  6 0 2 6 11 5 1 3 2 0 1 3 2 1 3 3 3 1 4 3 4 1 5 4 4 5 10 9 3 10 5 11 3 10 11 6 3 10 6 12 3 9 10 12 3 12 6 7 3 7 6 2 3 7 2 3 3 7 3 8 3 8 3 4 3 8 4 9 3 12 7 8 3 8 9 12",

" 0 18  6 12 6 1 7 8 11 3 6 12 11 3 6 11 10 3 10 11 9 3 9 11 8 4 9 8 3 4 3 3 8 2 3 2 8 7 3 2 7 1 3 2 1 0 3 3 2 0 3 0 1 5 3 5 1 6 3 5 6 10 3 5 10 4 3 10 9 4 3 0 5 4 3 4 3 0",

" 0 18  6 8 2 3 9 12 7 3 2 8 7 3 2 7 1 3 1 7 6 3 6 7 12 3 6 12 11 4 11 12 10 4 3 10 12 9 3 10 9 3 3 4 10 3 3 4 3 0 3 0 3 2 3 0 2 1 3 0 1 5 3 5 1 6 3 5 6 11 3 4 0 5 3 5 11 4",

" 0 17  6 10 9 4 0 1 5 3 9 10 5 3 9 5 11 3 11 5 6 3 6 5 1 3 6 1 2 3 2 1 0 3 2 0 3 3 3 0 4 3 3 4 8 3 8 4 9 3 8 9 11 3 8 11 7 3 7 11 6 3 7 6 2 3 7 2 3 3 3 8 7",

" 0 18  6 8 3 9 12 7 2 3 3 8 2 3 3 2 0 3 0 2 1 3 1 2 7 3 1 7 6 3 6 7 12 3 6 12 11 3 11 12 9 3 11 9 10 3 10 9 4 3 4 9 3 3 4 3 0 4 10 4 0 5 3 5 0 1 3 5 1 6 3 5 6 11 3 11 10 5",

" 0 18  6 8 9 7 2 0 3 3 9 8 3 3 9 3 10 3 10 3 4 3 4 3 0 3 4 0 1 3 1 0 2 3 1 2 6 3 6 2 7 3 6 7 12 3 12 7 11 3 11 7 9 3 11 9 10 3 11 10 5 3 5 10 4 3 5 4 1 4 5 1 6 12 3 12 11 5",

" 0 18  6 12 8 2 0 3 9 3 8 12 9 3 8 9 11 3 11 9 10 3 10 9 3 3 10 3 4 3 4 3 0 3 4 0 5 3 5 0 1 3 1 0 2 3 1 2 7 3 7 2 8 3 7 8 11 3 7 11 6 3 6 11 10 4 6 10 4 5 3 1 7 6 3 6 5 1",

" 0 18  6 10 11 12 9 3 4 3 11 10 4 3 11 4 5 3 5 4 0 3 0 4 3 3 0 3 2 3 2 3 8 3 8 3 9 3 8 9 12 3 8 12 7 3 7 12 6 3 6 12 11 3 6 11 5 4 6 5 0 1 3 1 0 2 3 2 8 7 3 1 2 7 3 7 6 1",

" 0 18  6 12 11 8 9 4 10 3 11 12 10 3 11 10 6 3 6 10 5 3 5 10 4 3 5 4 0 3 0 4 3 3 3 4 9 3 3 9 8 3 3 8 2 3 2 8 7 3 7 8 11 3 7 11 6 4 2 7 6 1 3 1 6 5 3 1 5 0 3 0 3 2 3 2 1 0",

" 0 19  6 12 9 4 10 6 11 3 9 12 11 3 9 11 8 3 8 11 7 3 7 11 6 3 7 6 1 3 1 6 5 3 5 6 10 3 5 10 4 3 5 4 0 3 0 4 3 3 3 4 9 3 3 9 8 3 3 8 2 3 2 8 7 3 2 7 1 3 2 1 0 3 1 5 0 3 0 3 2",

" 0 18  6 10 9 3 0 1 4 3 9 10 4 3 9 4 11 3 11 4 5 3 5 4 1 3 5 1 6 3 6 1 2 3 2 1 0 3 2 0 3 3 2 3 7 3 7 3 8 3 8 3 9 3 8 9 11 3 8 11 12 3 12 11 5 3 12 5 6 4 12 6 2 7 3 7 8 12",

" 0 18  6 9 3 4 10 12 8 3 3 9 8 3 3 8 2 3 2 8 7 3 7 8 12 3 7 12 6 3 6 12 11 3 11 12 10 3 11 10 4 3 11 4 5 3 5 4 0 3 0 4 3 3 0 3 2 3 0 2 1 3 1 2 7 3 1 7 6 4 5 0 1 6 3 6 11 5",

" 0 20  6 0 2 6 11 5 1 3 2 0 1 3 2 1 3 3 3 1 4 3 4 1 5 3 4 5 9 3 9 5 10 3 10 5 11 3 10 11 12 3 12 11 6 3 12 6 13 3 13 6 7 3 7 6 2 3 7 2 3 3 7 3 8 3 8 3 4 3 8 4 9 3 8 9 13 4 9 10 12 13 3 13 7 8",

" 0 18  6 0 1 2 3 4 5 3 0 5 6 4 6 5 4 7 3 7 4 3 3 7 3 8 3 8 3 9 3 9 3 2 3 9 2 1 3 9 1 10 3 8 9 10 3 10 1 11 3 11 1 0 3 11 0 6 3 11 6 12 3 12 6 7 3 12 7 8 3 12 8 10 3 10 11 12",

" 0 18  6 11 10 4 0 5 6 3 11 6 7 4 7 6 1 2 3 1 6 5 3 1 5 0 3 2 1 0 3 2 0 3 3 3 0 4 3 3 4 9 3 9 4 10 3 9 10 12 3 12 10 11 3 12 11 7 3 12 7 8 3 8 7 2 3 8 2 3 3 8 3 9 3 9 12 8",

" 0 18  6 0 1 6 11 10 5 3 0 5 4 4 4 5 9 8 3 9 5 10 3 9 10 11 3 9 11 12 3 8 9 12 3 12 11 6 3 12 6 7 3 8 12 7 3 7 6 2 3 2 6 1 3 2 1 0 3 2 0 3 3 3 0 4 3 7 2 3 3 3 4 8 3 8 7 3",

" 0 18  6 12 10 4 5 6 11 3 12 11 8 4 8 11 7 2 3 7 11 6 3 7 6 1 3 1 6 5 3 1 5 0 3 0 5 4 3 0 4 3 3 3 4 9 3 9 4 10 3 9 10 12 3 9 12 8 3 3 9 8 3 3 8 2 3 0 3 2 3 1 0 2 3 2 7 1",

" 0 20  6 0 3 8 12 7 2 3 0 2 1 4 1 2 5 4 3 5 2 6 3 6 2 7 3 6 7 11 3 11 7 12 3 11 12 13 3 13 12 8 3 13 8 9 3 9 8 4 3 4 8 3 3 9 4 5 3 1 4 3 3 3 0 1 3 9 5 10 3 10 5 6 3 10 6 11 3 10 11 13 3 13 9 10",

" 0 18  6 0 1 2 3 4 5 3 0 5 6 3 6 5 4 4 6 4 7 8 3 7 4 9 3 9 4 3 3 9 3 10 3 10 3 2 3 10 2 1 3 10 1 11 3 9 10 11 3 7 9 11 3 11 1 12 3 12 1 0 3 7 11 12 3 8 7 12 3 8 12 0 3 0 6 8",

" 0 20  6 9 3 4 10 11 13 3 9 13 12 3 12 13 11 3 12 11 7 4 7 11 6 1 3 6 11 10 3 6 10 5 3 5 10 4 3 5 4 0 3 0 4 3 3 0 3 2 3 2 3 8 3 8 3 9 3 8 9 12 3 8 12 7 3 2 8 7 3 2 7 1 3 0 2 1 3 1 6 5 3 5 0 1",

" 0 18  6 3 10 12 7 8 9 3 3 9 2 3 2 9 8 3 2 8 1 3 1 8 7 3 1 7 6 3 6 7 12 3 6 12 11 3 11 12 10 3 11 10 4 3 4 10 3 3 4 3 0 3 0 3 2 3 0 2 1 4 0 1 6 5 3 5 6 11 3 5 11 4 3 4 0 5",

" 0 17  6 7 8 9 4 10 11 3 7 11 6 3 6 11 10 3 6 10 5 3 5 10 4 3 5 4 0 3 0 4 3 3 3 4 9 3 3 9 8 3 3 8 2 3 2 8 7 3 2 7 1 3 1 7 6 3 1 6 5 3 1 5 0 3 2 1 0 3 0 3 2",

" 0 18  6 2 6 11 5 1 0 3 2 0 3 3 3 0 1 3 3 1 4 3 4 1 5 3 4 5 9 3 9 5 10 3 10 5 11 3 10 11 6 3 10 6 12 3 12 6 7 3 7 6 2 3 7 2 3 4 7 3 4 8 3 8 4 9 3 9 10 12 3 8 9 12 3 12 7 8",

" 0 18  6 6 12 10 3 4 11 3 6 11 5 3 5 11 4 3 5 4 0 3 0 4 3 3 0 3 2 3 2 3 9 3 9 3 10 3 9 10 12 3 9 12 8 3 8 12 7 3 7 12 6 3 7 6 1 3 1 6 5 3 1 5 0 3 1 0 2 4 8 7 1 2 3 2 9 8",

" 0 18  6 5 10 9 4 0 1 3 5 1 2 3 2 1 0 3 2 0 3 3 3 0 4 3 3 4 7 3 7 4 8 3 8 4 9 3 8 9 12 3 12 9 10 3 12 10 11 3 11 10 5 3 11 5 6 3 6 5 2 3 6 2 3 3 6 3 7 3 11 6 7 4 7 8 12 11",

" 0 18  6 3 9 11 12 7 8 3 3 8 2 3 2 8 7 3 2 7 1 3 1 7 6 3 6 7 12 3 6 12 11 3 6 11 10 3 10 11 9 3 10 9 4 3 4 9 3 3 4 3 0 3 0 3 2 3 0 2 1 3 0 1 5 4 5 1 6 10 3 5 10 4 3 4 0 5",

" 0 17  6 6 11 8 9 4 10 3 6 10 5 3 5 10 4 3 5 4 0 3 0 4 3 3 3 4 9 3 3 9 8 3 3 8 2 3 2 8 7 3 7 8 11 3 7 11 6 3 7 6 1 3 1 6 5 3 1 5 0 3 1 0 2 3 0 3 2 3 2 7 1",

" 0 20  6 3 4 10 13 12 9 3 3 9 8 3 8 9 12 3 8 12 7 3 7 12 11 3 11 12 13 3 11 13 10 3 11 10 6 3 6 10 5 3 5 10 4 3 5 4 0 3 0 4 3 3 0 3 2 3 2 3 8 3 2 8 7 3 2 7 1 4 1 7 11 6 3 0 2 1 3 5 0 1 3 1 6 5",

" 0 20  6 9 13 12 7 2 8 3 9 8 3 3 3 8 2 3 3 2 0 3 0 2 1 3 1 2 7 3 1 7 6 3 6 7 12 3 6 12 11 3 11 12 13 3 11 13 10 3 10 13 9 3 10 9 4 3 4 9 3 3 4 3 0 4 10 4 0 5 3 5 0 1 3 5 1 6 3 5 6 11 3 11 10 5",

" 0 20  6 1 2 8 12 11 7 3 1 7 6 3 6 7 11 3 6 11 10 3 10 11 13 3 13 11 12 3 13 12 9 3 9 12 8 3 9 8 3 3 3 8 2 3 3 2 0 3 0 2 1 3 0 1 5 3 5 1 6 3 5 6 10 3 5 10 4 4 4 10 13 9 3 4 9 3 3 4 3 0 3 0 5 4",

" 0 20  6 12 13 10 4 5 11 3 12 11 6 3 6 11 5 3 6 5 1 3 1 5 0 3 0 5 4 3 0 4 3 3 3 4 10 3 3 10 9 3 9 10 13 3 9 13 8 3 8 13 7 3 7 13 12 3 7 12 6 3 7 6 1 4 8 7 1 2 3 2 1 0 3 2 0 3 3 2 3 9 3 9 8 2",

" 0 20  6 7 2 8 13 11 12 3 7 12 6 3 6 12 11 3 6 11 5 3 5 11 10 3 10 11 13 3 10 13 9 3 9 13 8 3 9 8 3 3 3 8 2 3 3 2 0 3 0 2 1 3 1 2 7 3 1 7 6 3 1 6 5 3 0 1 5 4 0 5 10 4 3 4 10 9 3 4 9 3 3 3 0 4",

" 0 18  6 12 8 3 0 4 9 3 12 9 10 3 10 9 5 3 5 9 4 3 5 4 0 3 5 0 1 3 1 0 2 3 2 0 3 3 2 3 7 3 7 3 8 3 7 8 11 3 11 8 12 3 11 12 10 3 11 10 6 4 6 10 5 1 3 7 11 6 3 2 7 6 3 6 1 2",

" 0 18  6 11 4 5 1 2 6 3 11 6 12 3 12 6 7 3 7 6 2 3 7 2 8 4 8 2 0 3 3 0 2 1 3 0 1 5 3 0 5 4 3 3 0 4 3 3 4 10 3 10 4 11 3 10 11 12 3 10 12 9 3 9 12 7 3 9 7 8 3 3 10 9 3 9 8 3",

" 0 18  6 5 1 6 11 12 10 3 5 10 4 3 4 10 9 3 9 10 12 3 9 12 8 3 8 12 11 3 8 11 7 3 7 11 6 3 7 6 2 3 2 6 1 3 2 1 0 3 0 1 5 3 0 5 4 4 0 4 9 3 3 3 9 8 3 3 8 7 3 3 7 2 3 2 0 3",

" 0 20  6 6 11 13 10 5 1 3 6 1 2 3 2 1 0 3 0 1 5 3 0 5 4 3 4 5 10 3 4 10 9 3 9 10 13 3 9 13 8 3 8 13 12 3 12 13 11 3 12 11 6 3 12 6 7 3 7 6 2 3 7 2 3 3 3 2 0 4 3 0 4 9 3 3 9 8 3 8 12 7 3 7 3 8",

" 0 18  6 0 1 2 3 4 5 3 0 5 6 3 6 5 7 3 7 5 4 3 7 4 8 3 8 4 9 3 9 4 3 4 9 3 2 1 3 9 1 10 3 8 9 10 3 10 1 11 3 11 1 0 3 11 0 6 3 11 6 12 3 12 6 7 3 12 7 8 3 12 8 10 3 10 11 12",

" 0 20  6 13 11 12 6 1 7 3 13 7 8 3 8 7 2 3 2 7 1 3 2 1 0 3 0 1 5 3 5 1 6 3 5 6 11 3 6 12 11 3 5 11 10 3 10 11 13 3 10 13 9 3 9 13 8 3 9 8 3 3 3 8 2 3 3 2 0 3 3 0 4 4 4 0 5 10 3 4 10 9 3 9 3 4",

" 0 20  6 0 1 2 3 4 5 3 0 5 6 3 6 5 7 3 7 5 4 3 7 4 8 3 8 4 9 3 9 4 3 3 9 3 2 4 9 2 10 11 3 8 9 11 3 10 2 1 3 10 1 0 3 10 0 12 3 12 0 6 3 11 10 12 3 11 12 13 3 8 11 13 3 7 8 13 3 6 7 13 3 13 12 6",

" 0 20  6 11 10 4 5 1 6 3 11 6 12 3 12 6 7 3 7 6 1 3 7 1 2 3 2 1 0 3 0 1 5 3 0 5 4 3 0 4 3 3 3 4 10 3 3 10 9 3 9 10 13 3 13 10 11 3 13 11 12 3 13 12 8 3 8 12 7 3 8 7 2 3 8 2 9 4 2 0 3 9 3 9 13 8",

" 0 18  6 3 10 11 12 7 9 3 3 9 2 3 2 9 8 3 8 9 7 3 8 7 1 3 1 7 6 3 6 7 12 3 6 12 11 3 6 11 5 3 5 11 4 3 4 11 10 3 4 10 3 3 4 3 0 3 0 3 2 4 0 2 8 1 3 1 6 5 3 0 1 5 3 5 4 0",

" 0 22  6 0 1 2 3 4 5 3 0 5 6 3 6 5 7 3 7 5 8 3 8 5 4 3 8 4 3 3 8 3 9 3 9 3 10 3 10 3 2 3 10 2 11 3 11 2 12 3 12 2 1 3 12 1 0 3 12 0 13 3 13 0 6 3 13 6 14 3 14 6 7 4 14 7 9 10 3 7 8 9 3 14 10 11 3 11 12 13 3 13 14 11",

" 0 20  6 0 1 2 3 4 5 3 0 5 6 3 6 5 7 3 7 5 8 3 8 5 4 3 8 4 9 4 9 4 2 1 3 4 3 2 3 9 1 10 3 10 1 11 3 11 1 0 3 11 0 6 3 11 6 12 3 12 6 7 3 10 11 12 3 12 7 13 3 13 7 8 3 13 8 9 3 13 9 10 3 10 12 13"};

};
// Generator complete. All 6-gons determined
@
