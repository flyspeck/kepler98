head	1.2;
access;
symbols;
locks
	hales:1.2; strict;
comment	@# @;


1.2
date	97.12.23.00.55.40;	author hales;	state Exp;
branches;
next	1.1;

1.1
date	97.11.19.23.23.12;	author hales;	state Exp;
branches;
next	;


desc
@makefile for part3 and related interval programs
@


1.2
log
@Nothing essential has changed.
@
text
@


# for Silicon Graphics cc compiler, -O2 for optimization, -g for debugging
#CC = CC
#CCOPTS1 = -g -OPT:IEEE_comparisons:IEEE_arithmetic=1:roundoff=0:fold_arith_limit=2000 

# for g++ on SUNS;  option -O2 optimize, -g debug
# problem with -O2 and inline rounding mode on solaris, 
# code migrates past inline.  Let's keep it at -O1 optimization.
# -O1 for optimization
##L = -L/usr/local/gcc-2.7.2/lib
#CC     = g++
#CCOPTS1 = -g -W -Wall -fno-defer-pop -L/usr/local/lib 


# solaris: -O2 for optimization...
CC = CC
#L = 
CCOPTS1 = -g +w -O0

error.o : error.h interval.h error.cc
	$(CC) $(CCOPTS1) -c error.cc
interval.o : interval.h interval_inline.h error.h interval.cc
	$(CC) $(CCOPTS1) -c interval.cc
secondDerive.o : secondDerive.cc secondDerive.h error.h \
	interval.h interval_inline.h 
	$(CC) $(CCOPTS1) -c secondDerive.cc 
lineInterval.o : lineInterval.h lineInterval.cc interval.h \
	error.h 
	$(CC) $(CCOPTS1) -c lineInterval.cc
taylorInterval.o : taylorInterval.cc error.h interval.h 
	$(CC) $(CCOPTS1) -c taylorInterval.cc
recurse.o : recurse.h recurse.cc taylorInterval.h error.h interval.h interval_inline.h 
	$(CC) $(CCOPTS1) -c recurse.cc 
recurseQ.o : recurse.h recurseQ.cc taylorInterval.h error.h interval.h interval_inline.h 
	$(CC) $(CCOPTS1) -c recurseQ.cc 
trig.o : recurse.h trig.cc trig.h taylorInterval.h error.h interval.h interval_inline.h 
	$(CC) $(CCOPTS1) -c trig.cc 


testit: test.cc error.h error.o interval.h interval.o lineInterval.h \
	lineInterval.o secondDerive.h secondDerive.o taylorInterval.o \
	recurse.h recurse.o
	$(CC) $(CCOPTS1) test.cc error.o interval.o lineInterval.o secondDerive.o taylorInterval.o recurse.o -o testit -lm $(L)

part3 : part3.cc error.h error.o interval.h interval.o lineInterval.h \
	lineInterval.o secondDerive.h secondDerive.o taylorInterval.o \
	recurse.h recurse.o
	$(CC) $(CCOPTS1) part3.cc error.o interval.o lineInterval.o secondDerive.o taylorInterval.o recurse.o -o part3 -lm $(L)

part3t : part3t.cc error.h error.o interval.h interval.o lineInterval.h \
	lineInterval.o secondDerive.h secondDerive.o taylorInterval.o \
	recurse.h recurse.o
	$(CC) $(CCOPTS1) part3t.cc error.o interval.o lineInterval.o secondDerive.o taylorInterval.o recurse.o -o part3t -lm $(L)

# same as part3t :

part3tx : part3t.cc error.h error.o interval.h interval.o lineInterval.h \
	lineInterval.o secondDerive.h secondDerive.o taylorInterval.o \
	recurse.h recurse.o
	$(CC) $(CCOPTS1) part3t.cc error.o interval.o lineInterval.o secondDerive.o taylorInterval.o recurse.o -o part3tx -lm $(L)

# same as part3t :
part3ty : part3t.cc error.h error.o interval.h interval.o lineInterval.h \
	lineInterval.o secondDerive.h secondDerive.o taylorInterval.o \
	recurse.h recurse.o
	$(CC) $(CCOPTS1) part3t.cc error.o interval.o lineInterval.o secondDerive.o taylorInterval.o recurse.o -o part3ty -lm $(L)

# same as part3t :
part3tz : part3t.cc error.h error.o interval.h interval.o lineInterval.h \
	lineInterval.o secondDerive.h secondDerive.o taylorInterval.o \
	recurse.h recurse.o
	$(CC) $(CCOPTS1) part3t.cc error.o interval.o lineInterval.o secondDerive.o taylorInterval.o recurse.o -o part3tz -lm $(L)

# same as part3t :
part3tw : part3t.cc error.h error.o interval.h interval.o lineInterval.h \
	lineInterval.o secondDerive.h secondDerive.o taylorInterval.o \
	recurse.h recurse.o
	$(CC) $(CCOPTS1) part3t.cc error.o interval.o lineInterval.o secondDerive.o taylorInterval.o recurse.o -o part3tw -lm $(L)

part3o : part3o.cc error.h error.o interval.h interval.o lineInterval.h \
	lineInterval.o secondDerive.h secondDerive.o taylorInterval.o \
	recurse.h recurse.o
	$(CC) $(CCOPTS1) part3o.cc error.o interval.o lineInterval.o secondDerive.o taylorInterval.o recurse.o part3oData.o -o part3o -lm $(L)

secondDerive : secondDerive.cc error.h interval.h interval_inline.h \
	error.o interval.o io.o
	$(CC) $(CCOPTS1) secondDerive.cc error.o interval.o io.o -o secondDerive -lm

@


1.1
log
@Initial revision
@
text
@d5 2
a6 3
### also change interval.h to #define _black_
CC = CC
CCOPTS1 = -O2 -OPT:IEEE_comparisons:IEEE_arithmetic=1:roundoff=0:fold_arith_limit=2000 
d12 1
a13 1
#L = -L/usr/local/gcc-2.7.2/lib
d18 1
a18 1
#CC = CC
d20 1
a20 10
#CCOPTS1 = -g +w 

# Warnings
#
#	-Wtraditional -Wshadow -Wpointer-arith \
#	-Wcast-qual -Wcast-align -Wwrite-strings -Wconversion \
#	-Wstrict-prototypes -Wmissing-prototypes \
#	-Wmissing-declarations -Wredundant-decls -Wnested-externs \
#	-Woverloaded-virtual -Winline
# -Waggregate-return \
d26 1
a26 1
secondDerive.o : secondDerive.cc secondDerive.h taylorInterval.h error.h \
d51 35
@
