head	1.3;
access;
symbols;
locks
	hales:1.3; strict;
comment	@// @;


1.3
date	98.06.24.23.53.35;	author hales;	state Exp;
branches;
next	1.2;

1.2
date	97.12.15.01.32.26;	author hales;	state Exp;
branches;
next	1.1;

1.1
date	97.09.13.18.13.29;	author hales;	state Exp;
branches;
next	;


desc
@interval package, error routines
@


1.3
log
@*** empty log message ***
@
text
@//  copyright (c) 1997, Thomas C. Hales, all rights reserved.


// error.c // Thomas C. Hales // Jan 1996
// This contains a error-handling procedures


extern "C" {
#include <stdlib.h>
#include <time.h>
}
#include <iostream.h>
#include "error.h"

static int ERROR_COUNT=0;

void error::printTime()
        {
        cout << time(0) << endl << flush;
        }

void error::printTime(const char* s)
        {
        cout << s << " " << time(0) << endl << flush;
        }

void error::message(const char *s)
	{
	cout << "error(" << time(0) << "): " << s << "\n" << flush; //was cerr
	ERROR_COUNT++;
	if (ERROR_COUNT>200)
		{
		cout << "Too many errors. Bailing out..."<< endl<< flush;
		exit(0);
		}
	}

static void diagnostic()
	{
	if (ERROR_COUNT>0)
	cout << "(errors: " << ERROR_COUNT << ")" << endl << flush;
	else cout << "(no errors)" << endl << flush;
	}

void error::diagnostic() { ::diagnostic(); }
	

class errorWrapup 
{
public:
	~errorWrapup();
};

errorWrapup::~errorWrapup () { diagnostic(); }

static errorWrapup Ewrapup;
@


1.2
log
@A minor name change was made error_wrapup->errorWrapup.
@
text
@d45 3
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
	};
d45 1
a45 1
class error_wrapup 
d48 1
a48 1
	~error_wrapup();
d51 1
a51 1
static error_wrapup E;
d53 1
a53 1
error_wrapup::~error_wrapup () { diagnostic(); }
@
