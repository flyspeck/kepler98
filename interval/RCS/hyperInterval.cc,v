head	1.1;
access;
symbols;
locks
	hales:1.1; strict;
comment	@// @;


1.1
date	97.09.13.18.13.29;	author hales;	state Exp;
branches;
next	;


desc
@interval package,
@


1.1
log
@Initial revision
@
text
@//  copyright (c) 1997, Thomas C. Hales, all rights reserved.

#include <iomanip.h>
#include <iostream.h>
extern "C"
{
#include <math.h>
#include <stdlib.h>
}
#include "error.h"
#include "interval.h"
#include "hyperInterval.h"

// make a private extension of the hyperInterval
class series : public hyperInterval {
        public:
        inline series operator*(series a) ;
        inline series operator*(interval a);
        inline series operator/(series a);
        inline series operator+(series a);
        inline series operator-(series a);
        inline series operator-();
        friend ostream &operator<< (ostream &stream,series x);
		series(interval);
		series(hyperInterval);
		series() {};
        };

#include "hyperInterval_inline.h"

ostream &operator<< (ostream &stream,series x)
	{
	cout << "[" << x.f << ":" << flush;
	for (int i=0;i<6;i++) cout << x.Df[i] << " " << flush;
	cout << "]" << flush;
	return stream;
	}

series::series(interval a)
	{
	f = a;
	for (int i=0;i<6;i++) Df[i]=interConstant::zero;
	}

series::series(hyperInterval a)
	{
	f = a.f;
	for (int i=0;i<6;i++) Df[i]= a.Df[i];
	}

static series sqrt(series a)
	{
	series temp;
	temp.f = interMath::sqrt(a.f);
	interval rs = interConstant::one/(interConstant::two*temp.f);
	int i;
	for (i=0;i<6;i++) temp.Df[i]=rs*a.Df[i];
	return temp;
	}

static series atan(series a,series b) // atan(a/b);
	{
	series temp;
	temp.f = interMath::atan(a.f/b.f);
	interval rden = interConstant::one/(a.f*a.f+b.f*b.f);
	int i;
	for (i=0;i<6;i++) temp.Df[i]= rden*(a.Df[i]*b.f-b.Df[i]*a.f);
	return temp;
	}

static series atan(series a)
	{
	return atan(a,interConstant::one);
	}

// modified arctan is defined as matan(x) = atan(sqrt(x))-sqrt(x)+sqrt(x)^3/3.
static void matan(const interval&u,const interval Du[2],
        interval& ma,interval Dma[2])
        {
        int i;
        interval t = interMath::sqrt(u);
        static interval third= interConstant::one/interConstant::three;
        // make use of monotonicity of matan in computation of its interval:
        interval atant = interMath::atan(t);
        double mau;
        interMath::up(); 
		mau = interMath::sup(atant) + (-interMath::sup(t)) + interMath::sup(t)*interMath::sup(u)*interMath::sup(third);
        //                                  ^^ sup instead of inf by monotonicity.
        double man;
        interMath::down(); man = interMath::inf(atant) + (-interMath::inf(t)) + interMath::inf(t)*interMath::inf(u)*interMath::inf(third);
        ma = interval(man,mau);
        interval x = t*u/(interConstant::two*(interConstant::one+u));
        for (i=0;i<2;i++) Dma[i]=Du[i]*x;
        }

static void compute_rogersterm(interval x,interval y,interval z,
	interval& f,interval Df[2])
	{ // Rogers5d:
	        
        double  xn=interMath::inf(x), yyn=interMath::inf(y), zn=interMath::inf(z),
                xu=interMath::sup(x), yu=interMath::sup(y), zu=interMath::sup(z);
        interMath::up();
        double xu2=xu*xu, yu2=yu*yu, zu2=zu*zu;
        double xu3=xu*xu2, yu3=yu*yu2, zu3=zu*zu2;
        interMath::down();
        double xn2=xn*xn, yn2=yyn*yyn, zn2=zn*zn;
        double xn3=xn2*xn, yn3=yn2*yyn, zn3=zn2*zn;
 
        double fmin,fmax;
        interMath::down();
        fmin = //=Rogers5d
                2.0*xn2*xn*yn2 + 3.0*(xu*(yu2*(-yu2))) + 8.0*xn2*xn*yyn*zn
                + 12.0*(xu*(yu2*(yu*(-zu)))) + 8.0*xn2*xn*zn2
                + 12.0*(xu*(yu2*(-zu2))) +
                6.0*xn2*zn3 + 12.0*(xu*(yu*(-zu3))) + 8.0*yn2*zn3
                + 3.0*(xu*(zu2*(-zu2))) + 8.0*yyn*zn2*zn2 +
                   2.0*zn2*zn2*zn;
 
        interMath::up();
        fmax = //=Rogers5d
                2.0*xu2*xu*yu2 + 3.0*(xn*(yn2*(-yn2))) + 8.0*xu2*xu*yu*zu
                + 12.0*(xn*(yn2*(yyn*(-zn)))) + 8.0*xu2*xu*zu2
                + 12.0*(xn*(yn2*(-zn2))) +
                6.0*xu2*zu3 + 12.0*(xn*(yyn*(-zn3))) + 8.0*yu2*zu3
                + 3.0*(xn*(zn2*(-zn2))) + 8.0*yu*zu2*zu2 +
                   2.0*zu2*zu2*zu;
        f = interval(fmin,fmax);
 
        // Warning!! We never use the z-derivatives, so we set them to interConstant::zero.
	
        // now for the first derivatives:
        double xmin[2],xmax[2];
 
        interMath::down();
        xmin[0]= 3.0*(2.0*xn2*yn2 +yu2*(-yu2)+8.0*xn2*yyn*zn+4.0*(yu3*(-zu))
                +8.0*xn2*zn2 + 4.0*(yu2*(-zu2))+4.0*xn*zn3 + 4.0*(yu*(-zu3))
                +zu2*(-zu2));
        xmin[1]= 4.0*(xn3*yyn + 3.0*(xu*(-yu3))+2.0*xn3*zn +9.0*(xu*(yu2*(-zu)))
                +6.0*(xu*(yu*(-zu2))) + 3.0*(xu*(-zu3))+4.0*yyn*zn3+2.0*zn2*zn2);
 
        interMath::up();
        xmax[0]= 3.0*(2.0*xu2*yu2 +yn2*(-yn2)+8.0*xu2*yu*zu +4.0*(yn3*(-zn))
                +8.0*xu2*zu2 + 4.0*(yn2*(-zn2))+4.0*xu*zu3 + 4.0*(yyn*(-zn3))
                +(zn2*(-zn2)));
        xmax[1]= 4.0*(xu3*yu + 3.0*(xn*(-yn3))+2.0*xu3*zu +9.0*(xn*(yn2*(-zn)))
                +6.0*(xn*(yyn*(-zn2))) + 3.0*(xn*(-zn3))+4.0*yu*zu3+2.0*zu2*zu2);
        for (int i=0;i<2;i++) Df[i]=interval(xmin[i],xmax[i]);
        }

static void quotient2(const interval& a,const interval Da[2],
	const interval& b,const interval Db[2],
	interval& v,interval Dv[2])
        {
        int i;
        v = a/b;
        interval b2 = interConstant::one/(b*b);
        interval r[2];
        for (i=0;i<2;i++) r[i] = (Da[i]*b- a*Db[i]);
        for (i=0;i<2;i++) Dv[i] = r[i]*b2;
        }

static void product2(const interval& u,const interval Du[2],
	const interval& v,const interval Dv[2],
	interval& uv,interval Duv[2])
	{
	int i;
	uv = u*v;
	for (i=0;i<2;i++) Duv[i] = u*Dv[i] + v*Du[i];
	}

static void Dfivehalves(const interval& u,const interval Du[2],
        interval& fh,interval Dfh[2])
        {
        int i;
        interval sqrt_u = interMath::sqrt(u);
        static interval fiveh = interConstant::five/interConstant::two;
        interval x = fiveh*u*sqrt_u;
        fh = sqrt_u*u*u;                        // Def' is u^(5/2) & derivs.
        for (i=0;i<2;i++) Dfh[i]= x*Du[i];
        }

static void compute_quoin(interval x,interval y,interval z,interval& f,
                interval Df[2] /* x and y derivatives */)
        // method interConstant::two : tangent expansion.
        {
	if ((interMath::sup(y)<interMath::inf(x))||(interMath::sup(z)<interMath::inf(y)))
		{
		f = Df[0]=Df[1]=interConstant::zero; return;
		}
        int i;
        interval x2 = x*x;
        interval y2 = y*y;
        interval z2 = z*z;
        interval Df1[2];
        Df1[0]= interConstant::three*(-x*x+z*z);
        Df1[1]= interConstant::zero;
        interval f1 = (-x+z)*(x*x+x*z-interConstant::two*z*z);
 
        interval unum = z2-y2;
        interval Dunum[2] = {interConstant::zero,-interConstant::two*y};
        interval uden = y2-x2;
        interval Duden[2]= {-interConstant::two*x,interConstant::two*y};
 
        interval u2, Du2[2];
        interval atu,Datu[2];
        quotient2(unum,Dunum,uden,Duden,u2,Du2);
	if (u2.lo<0.0) u2.lo=0.0;
	if (u2.hi<0.0) u2.hi=0.0;
 
        matan(u2,Du2,atu,Datu);
        interval g1,Dg1[2];
        product2(atu,Datu,f1,Df1,g1,Dg1);
        interval d5,Dd5[2];
        compute_rogersterm(x,y,z,d5,Dd5);
        interval fh,Dfh[2];
        Dfivehalves(u2,Du2,fh,Dfh);
        //interval lnum,Dlnum[2]; // same as uden //
        interval lden;
        interval yz = y+z; interval yz2=yz*yz; interval yz3=yz*yz2;
        lden = yz2*yz2*interConstant::three;
        interval ldenf = interConstant::four*interConstant::three*yz3;
        interval Dlden[2] = {interConstant::zero,ldenf};
        // interval ldenf2 = interval("36.0")*yz2; // not used.
        interval quo,Dquo[2];
        quotient2(uden,Duden,lden,Dlden,quo,Dquo);
        interval xx,Dxx[2];
        product2(quo,Dquo,fh,Dfh,xx,Dxx);
        interval g2,Dg2[2];
        product2(xx,Dxx,d5,Dd5,g2,Dg2);
 
        // Term g3.
        interval fz3 = interConstant::four*z*z2;
        interval vnum = (-x+y)*(-y+z);
        interval Dvnum[2]= {y-z,-interConstant::two*y+z+x};
        interval vden = (x+y)*(y+z);
        interval Dvden[2]= {y+z,interConstant::two*y+z+x};
        interval v,Dv[2];
        quotient2(vnum,Dvnum,vden,Dvden,v,Dv);
        interval mv,Dmv[2];
        matan(v,Dv,mv,Dmv);
        interval g3,Dg3[2];
        g3 = mv*fz3;
        for (i=0;i<2;i++) Dg3[i]=fz3*Dmv[i];
        // Combine terms. m16 because we consistently left out a factor of -1/6.
        static interval m16 = -interConstant::one/interval("6.0");
        f = m16*(g1+g2+g3);
        for (i=0;i<2;i++) Df[i] = m16*(Dg1[i]+Dg2[i]+Dg3[i]);
        }

static series U126(double x1,double x2,double x6)
	{
	series t;
	interMath::down();
	t.f.lo = (-x1)*x1+(-x2)*x2+(-x6)*x6+2.0*(x1*x2+x2*x6+x6*x1);
	t.Df[0].lo = 2.0*(-x1+x2+x6);
	t.Df[1].lo = 2.0*(+x1-x2+x6);
	t.Df[5].lo = 2.0*(+x1+x2-x6);
	t.Df[2].lo = 0.0;
	t.Df[3].lo = 0.0;
	t.Df[4].lo = 0.0;
	interMath::up();
	t.f.hi = (-x1)*x1+(-x2)*x2+(-x6)*x6+2.0*(x1*x2+x2*x6+x6*x1);
	t.Df[0].hi = 2.0*(-x1+x2+x6);
	t.Df[1].hi = 2.0*(+x1-x2+x6);
	t.Df[5].hi = 2.0*(+x1+x2-x6);
	t.Df[2].hi = 0.0;
	t.Df[3].hi = 0.0;
	t.Df[4].hi = 0.0;
	return t;
	}

series delta(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series t;
	interMath::up();
	t.f.hi =   x3*(x1 + x2 + x4 + x5)*x6 + x2*x5*(x1 + x3 + x4 + x6) + 
	   x1*x4*(x2 + x3 + x5 + x6);

	double tlo = (x2*x3+x5*x6)*x4 + x1*(x3*x5 + x2*x6) +
	   x3*(x3 + x6)*x6 + x2*x5*(x2 + x5) + x1*x4*(x1 + x4);

	t.Df[0].hi= (-x1)*x4 + x2*x5 +(-x3)*x5 +(-x2)*x6 + x3*x6 +
            x4*(x2 + x3 + x5 + x6) + x4*(-x1)+x4*(-x4);
        t.Df[1].hi=  x1*x4 + (- x3)*x4 +(- x2)*x5 +(- x1)*x6 + x3*x6 +
                x5*(x1 + x3 + x4  + x6)+ x5*(-x2)+x5*(-x5);
        t.Df[2].hi= x1*x4 +(- x2)*x4 +(- x1)*x5 + x2*x5 +(- x3)*x6 +
                (x1 + x2 + x4 + x5 )*x6+ x6*(-x3) + x6*(-x6);
        t.Df[3].hi= (-x2)*x3 +(- x1)*x4 + x2*x5 + x3*x6 +(- x5)*x6 +
                x1*(-x1) + x1*(-x4) + x1*(x2 + x3 + x5 + x6);
        t.Df[4].hi=  (-x1)*x3 + x1*x4 +(- x2)*x5 + x3*x6 +(- x4)*x6 +
                x2*(-x2) + x2*(-x5)+ x2*(x1 + x3 + x4 + x6);
        t.Df[5].hi= (-x1)*x2 + x1*x4 + x2*x5 +(-x4)*x5 +
                x3*(-x3) + x3*(-x6)+ x3*(x1 + x2 + x4 + x5 ) +(-x3)*x6;
 
	interMath::down();
	t.f.lo =   x3*(x1 + x2 + x4 + x5)*x6 + x2*x5*(x1 + x3 + x4 + x6) + 
	   x1*x4*(x2 + x3 + x5 + x6) - tlo;
	double thi = (x2*x3+x5*x6)*x4 + x1*(x3*x5 + x2*x6) +
	   x3*(x3 + x6)*x6 + x2*x5*(x2 + x5) + x1*x4*(x1 + x4);
 
	t.Df[0].lo= (-x1)*x4 + x2*x5 +(-x3)*x5 +(-x2)*x6 + x3*x6 +
            x4*(x2 + x3 + x5 + x6) + x4*(-x1)+x4*(-x4);
        t.Df[1].lo=  x1*x4 + (- x3)*x4 +(- x2)*x5 +(- x1)*x6 + x3*x6 +
                x5*(x1 + x3 + x4  + x6)+ x5*(-x2)+x5*(-x5);
        t.Df[2].lo= x1*x4 +(- x2)*x4 +(- x1)*x5 + x2*x5 +(- x3)*x6 +
                (x1 + x2 + x4 + x5 )*x6+ x6*(-x3) + x6*(-x6);
        t.Df[3].lo= (-x2)*x3 +(- x1)*x4 + x2*x5 + x3*x6 +(- x5)*x6 +
                x1*(-x1) + x1*(-x4) + x1*(x2 + x3 + x5 + x6);
        t.Df[4].lo=  (-x1)*x3 + x1*x4 +(- x2)*x5 + x3*x6 +(- x4)*x6 +
                x2*(-x2) + x2*(-x5)+ x2*(x1 + x3 + x4 + x6);
        t.Df[5].lo= (-x1)*x2 + x1*x4 + x2*x5 +(-x4)*x5 +
                x3*(-x3) + x3*(-x6)+ x3*(x1 + x2 + x4 + x5 ) +(-x3)*x6;
	interMath::up();
	t.f.hi = t.f.hi - thi;
	return t;
	}

static series f126(double x1,double x2,double ,double ,double ,double x6)
	{
	series t;
	interMath::up();
	t.f.hi = x2*(x1+x6) + x1*(x2+x6) + (-x1)*x1 + (-x2)*x2;
	t.Df[0].hi= -2.0*x1+2.0*x2+x6;
	t.Df[1].hi= 2.0*x1-2.0*x2 +x6;
	t.Df[2]= interConstant::zero;
	t.Df[3]= interConstant::zero;
	t.Df[4]= interConstant::zero;
	t.Df[5].hi = x1+x2;
	interMath::down();
	t.f.lo = x2*(x1+x6) + x1*(x2+x6) + (-x1)*x1 + (-x2)*x2;
	t.Df[0].lo= -2.0*x1+2.0*x2+x6;
	t.Df[1].lo= 2.0*x1-2.0*x2 +x6;
	t.Df[5].lo = x1+x2;
	return t;
	}

static series f135(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series s,t;
	s = f126(x1,x3,x2,x4,x6,x5);
	static int k[6]= {0,2,1,3,5,4};
	int i;
	for (i=0;i<6;i++) t.Df[i]=s.Df[k[i]];
	t.f = s.f;
	return t;
	}

static series f324(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series s,t;
	s = f126(x3,x2,x1,x6,x5,x4);
	static int k[6]= {2,1,0,5,4,3};
	int i;
	for (i=0;i<6;i++) t.Df[i]=s.Df[k[i]];
	t.f = s.f;
	return t;
	}

static series chi126(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series t;
	interMath::up();
	t.f.hi = x1*x2*x4 + x1*x2*x5 + x1*x3*x6 + x2*x3*x6 
		+ x1*x4*x6 + x2*x5*x6;
	double tlo =  x1*x1*x4 + x2*x2*x5 + 2*x1*x2*x6 + x3*x6*x6;
	t.Df[0].hi = 2.0*((-x1)*x4) + x2*x4 + x2*x5 
			+2.0*((-x2)*x6) + x3*x6 + x4*x6;
	t.Df[1].hi = x1*x4 + x1*x5 + 2.0*((-x2)*x5) 
			+ 2.0*((-x1)*x6) + x3*x6 + x5*x6;
	t.Df[2].hi = x1*x6 + x2*x6 + (-x6)*x6;
	t.Df[3].hi = (-x1)*x1 + x1*x2 + x1*x6;
	t.Df[4].hi = (-x2)*x2 + x1*x2 + x2*x6;
	t.Df[5].hi = 2.0*((-x1)*x2) + x1*x3 + x2*x3 + x1*x4 + x2*x5 
			+ 2.0*((-x3)*x6);
	interMath::down();
	t.f.lo = x1*x2*x4 + x1*x2*x5 + x1*x3*x6 + x2*x3*x6 
		+ x1*x4*x6 + x2*x5*x6 - tlo;
	double thi =  x1*x1*x4 + x2*x2*x5 + 2*x1*x2*x6 + x3*x6*x6;
	t.Df[0].lo = 2.0*((-x1)*x4) + x2*x4 + x2*x5 
			+2.0*((-x2)*x6) + x3*x6 + x4*x6;
	t.Df[1].lo = x1*x4 + x1*x5 + 2.0*((-x2)*x5) 
			+ 2.0*((-x1)*x6) + x3*x6 + x5*x6;
	t.Df[2].lo = x1*x6 + x2*x6 + (-x6)*x6;
	t.Df[3].lo = (-x1)*x1 + x1*x2 + x1*x6;
	t.Df[4].lo = (-x2)*x2 + x1*x2 + x2*x6;
	t.Df[5].lo = 2.0*((-x1)*x2) + x1*x3 + x2*x3 + x1*x4 + x2*x5 
			+ 2.0*((-x3)*x6);
	interMath::up();
	t.f.hi = t.f.hi - thi;
	return t;
	}

series chi324(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series t,s;
	s = chi126(x3,x2,x1,x6,x5,x4);
	int k[6]={2,1,0,5,4,3};
	for (int i=0;i<6;i++) t.Df[i]= s.Df[k[i]];
	t.f = s.f;
	return t;
	}


static series chi135(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series t,s;
	s = chi126(x1,x3,x2,x4,x6,x5);
	int k[6]={0,2,1,3,5,4};
	for (int i=0;i<6;i++) t.Df[i]= s.Df[k[i]];
	t.f = s.f;
	return t;
	}

static series U135(double x1,double x3,double x5)
	{
	series s,t;
	s = U126(x1,x3,x5);
	int k[6]={0,2,1,3,5,4};
	for (int i=0;i<6;i++) t.Df[i]=s.Df[k[i]];
	t.f = s.f;
	return t;
	}

static series U324(double x3,double x2,double x4)
	{
	series s,t;
	s = U126(x3,x2,x4);
	int k[6]={2,1,0,5,4,3};
	for (int i=0;i<6;i++) t.Df[i]=s.Df[k[i]];
	t.f = s.f;
	return t;
	}

static series a(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series t;
	double y1u,y1n,y2u,y2n,y3u,y3n;
 
	interMath::up();
	y1u = sqrt(x1); y2u = sqrt(x2); y3u = sqrt(x3);
	double y123u = y1u*y2u*y3u;
 
	interMath::down();
	y1n = sqrt(x1); y2n = sqrt(x2); y3n = sqrt(x3);
	double y123n = y1n*y2n*y3n;
	double tx = 1.0/y123u;
 
	interval yy1=interval(y1n,y1u),y2=interval(y2n,y2u),
		y3 = interval(y3n,y3u);
	interval X1 = interval(x1,x1),X2=interval(x2,x2),
		X3 = interval(x3,x3), X4=interval(x4,x4),
		X5 = interval(x5,x5), X6 = interval(x6,x6);
	interval v = yy1*(X2+X3-X4)+ y2*(X1+X3-X5) + y3*(X1+X2-X6);
	interval v0 = (X2+X3-X4)/yy1;
	interval v1 = (X1+X3-X5)/y2;
	interval v2 = (X1+X2-X6)/y3;
 
	interMath::up();
	double tz = 1.0/y123n;
	t.Df[0].hi = (y2u+y3u + x2*x3*tz + interMath::sup(v0)/2.0)/2.0;
	t.Df[1].hi = (y1u+y3u + x1*x3*tz + interMath::sup(v1)/2.0)/2.0;
	t.Df[2].hi = (y1u+y2u + x1*x2*tz + interMath::sup(v2)/2.0)/2.0;
	t.Df[3].hi = -y1n/2.0;
	t.Df[4].hi = -y2n/2.0;
	t.Df[5].hi = -y3n/2.0;
	t.f.hi = y123u + interMath::sup(v)/2.0;
 
	interMath::down();
	t.Df[0].lo = (y2n+y3n + x2*x3*tx + interMath::inf(v0)/2.0)/2.0;
        t.Df[1].lo = (y1n+y3n + x1*x3*tx + interMath::inf(v1)/2.0)/2.0;
        t.Df[2].lo = (y1n+y2n + x1*x2*tx + interMath::inf(v2)/2.0)/2.0;
	t.Df[3].lo = -y1u/2.0;
	t.Df[4].lo = -y2u/2.0;
	t.Df[5].lo = -y3u/2.0;
	t.f.lo = y123n + interMath::inf(v)/2.0;
	return t;
	}
	
//	deltaX := partial delta/partial x4.
series deltaX(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series t;
	interMath::up();
	t.f.hi = x2*x5 + x3*x6 + x1*(x2 + x3 + x5 + x6);
	double tlo = x1*x1 + x2*x3 + 2.0*x1*x4 + x5*x6;
	t.Df[0].hi= +2.0*(-x1) + x2 + x3 + 2.0*(-x4) + x5 + x6;
	t.Df[1].hi= x1-x3+x5;
	t.Df[2].hi= x1-x2+x6;
	t.Df[3].hi= 2.0*(-x1);
	t.Df[4].hi= x1+x2-x6;
	t.Df[5].hi= x1+x3-x5;
	interMath::down();
	t.f.lo = x2*x5 + x3*x6 + x1*(x2 + x3 + x5 + x6)-tlo;
	double thi = x1*x1 + x2*x3 + 2.0*x1*x4 + x5*x6;
	t.Df[0].lo= +2.0*(-x1) + x2 + x3 + 2.0*(-x4) + x5 + x6;
	t.Df[1].lo= x1-x3+x5;
	t.Df[2].lo= x1-x2+x6;
	t.Df[3].lo= 2.0*(-x1);
	t.Df[4].lo= x1+x2-x6;
	t.Df[5].lo= x1+x3-x5;
	interMath::up();
	t.f.hi = t.f.hi - thi;
	return t;
	}

series dih(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	static interval pi2 = "1.5707963267948966192313216916";
	static series p = series(pi2);
	series ax = -deltaX(x1,x2,x3,x4,x5,x6);
	double x14 = 4.0*x1;
	series t = series(interval(x14,x14));  t.Df[0]=interConstant::four;
	series b2 = delta(x1,x2,x3,x4,x5,x6)*t;
	series b = sqrt(b2);
	return p + atan(ax,b);
	}

series dih2(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	static int k[6] = {1,0,2,4,3,5};
	series s,t;
	s =dih(x2,x1,x3,x5,x4,x6);
	t.f = s.f;
	for (int i=0;i<6;i++) t.Df[i]= s.Df[k[i]];
	return t;
	}

series dih3(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	static int k[6] = {2,1,0,5,4,3};
	series s,t;
	s =dih(x3,x2,x1,x6,x5,x4);
	t.f = s.f;
	for (int i=0;i<6;i++) t.Df[i]= s.Df[k[i]];
	return t;
	}

series solid(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series ax = a(x1,x2,x3,x4,x5,x6)*interConstant::two;
	series s = sqrt(delta(x1,x2,x3,x4,x5,x6));
	return atan(s,ax)*interConstant::two;
	}

series gamma(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	static interval half("0.5");
	static interval twothird("0.66666666666666666666666666666");
	static interval mdoct6 = "-0.12015049158624418214";
	series t = sqrt(delta(x1,x2,x3,x4,x5,x6))*half;
	series a1,a2,a3,a4,b2,b3,b4;
	a1 = a(x1,x2,x3,x4,x5,x6);
	b2 = a(x1,x5,x6,x4,x2,x3);
	b3 = a(x4,x5,x3,x1,x2,x6);
	b4 = a(x4,x2,x6,x1,x5,x3);
	int i;
	{
	int k[6]= {0,4,5,3,1,2};
	a2.f = b2.f;
	for (i=0;i<6;i++) a2.Df[i]=b2.Df[k[i]];
	}
	{
	int k[6]= {3,4,2,0,1,5};
	a3.f = b3.f;
	for (i=0;i<6;i++) a3.Df[i]=b3.Df[k[i]];
	}
	{
	int k[6]= {3,1,5,0,4,2};
	a4.f = b4.f;
	for (i=0;i<6;i++) a4.Df[i]=b4.Df[k[i]];
	}
	return t*mdoct6+(atan(t,a1)+atan(t,a2)+atan(t,a3)+atan(t,a4))*twothird;
	}

series eta2(double x1,double x2,double x6)
	{	
	series t;
	t.Df[2]=t.Df[3]=t.Df[4]=interConstant::zero;
	interMath::up();
	t.f.hi = x1*x2*x6;
	t.Df[0].hi = x2*x6;
	t.Df[1].hi = x1*x6;
	t.Df[5].hi = x1*x2;
	interMath::down();
	t.f.lo = x1*x2*x6;
	t.Df[0].lo = x2*x6;
	t.Df[1].lo = x1*x6;
	t.Df[5].lo = x1*x2;
	return t/U126(x1,x2,x6);
	}

static series quoin(double x1,double x2,double x6,interval trunc)
	{
	series et = sqrt(eta2(x1,x2,x6));
	interval a2,a0; a2 = interval(x1/4.0,x1/4.0); a0 = interMath::sqrt(a2);
	series s;
	interval Df[2];
	compute_quoin(a0,et.f,trunc,s.f,Df);
	s.Df[0]= Df[0]/(interConstant::eight*a0) + Df[1]*et.Df[0];
	s.Df[1]= Df[1]*et.Df[1];
	s.Df[2]=s.Df[3]=s.Df[4]=interConstant::zero;
	s.Df[5]= Df[1]*et.Df[5];
	return s;
	}

static inline double pos(double x)
	{
	return (x>0.0 ? x : 0.0);
	}

static double chimin(   double x1,double x2,double x3,
                double x4,double x5,double x6)  // compute min;
        {
	interMath::down();
	// note that quantities in parentheses are positive on a 
	// simplex with acute angles.
        return x3*x6*pos(x4+x5-x6) + x2*x5*pos(x4-x5+x6)+x1*x4*pos(-x4+x5+x6)
               +2.0*(((-x4)*x5)*x6);
        }

double chi234min(const double x[6],const double z[6])
	{
	int i;
	double q[8];
	q[0]=chimin(x[4],x[5],x[0],x[1],x[2],x[3]);
	q[1]=chimin(x[4],x[5],x[0],x[1],x[2],z[3]);
	q[2]=chimin(x[4],x[5],x[0],x[1],z[2],x[3]);
	q[3]=chimin(x[4],x[5],x[0],x[1],z[2],z[3]);
	q[4]=chimin(x[4],x[5],x[0],z[1],x[2],x[3]);
	q[5]=chimin(x[4],x[5],x[0],z[1],x[2],z[3]);
	q[6]=chimin(x[4],x[5],x[0],z[1],z[2],x[3]);
	q[7]=chimin(x[4],x[5],x[0],z[1],z[2],z[3]);
	double temp = q[0];
	for (i=1;i<8;i++) if (q[i]<temp) temp = q[i];
	return temp;
	}

series vor_analytic(double x1,double x2,double x3,double x4,
	double x5,double x6)
	{
	static interval mdoct4 = "-2.883611798069860371364";
	static interval f43 = "1.333333333333333333333333333333";
	static interval f48 = "48.0";
        series u126 = U126(x1,x2,x6), u135 = U135(x1,x3,x5),
		u234 = U324(x3,x2,x4);
        series vol = f126(x1,x2,x3,x4,x6,x6)*chi126(x1,x2,x3,x4,x5,x6)/u126 +
		f324(x1,x2,x3,x4,x5,x6)*chi324(x1, x2, x3, x4, x5, x6)/u234 +
		f135(x1,x2,x3,x4,x5,x6)*chi135(x1, x2, x3, x4, x5, x6)/u135;
        vol = vol/(sqrt(delta(x1,x2,x3,x4,x5,x6))*f48);
        return vol*mdoct4 + solid(x1,x2,x3,x4,x5,x6)*f43;
        }

series swap_Vor(double x1,double x2,double x3,double x4,double x5,
	double x6)
	{
	int i;
	series s = vor_analytic(x1,x6,x5,x4,x3,x2);
	series t;
	t.f = s.f;
	int k[6]= {0,5,4,3,2,1};
	for (i=0;i<6;i++) t.Df[i]=s.Df[k[i]];
	return t;
	}

series rad2(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	series c = chi126(x1,x2,x3,x4,x5,x6);
	return c*c/(U126(x1,x2,x6)*delta(x1,x2,x3,x4,x5,x6)*interConstant::four) 
			+ eta2(x1,x2,x6);
	}

static series dihVcAugment(double x1,double x2,double x3,double x4,double x5,double x6,
	interval trunc,int long_edge_allowed=0)
	{
	static const interval mdoct_12 = "-0.0600752457931220910701037362515";
	static const interval doct_8 = -mdoct_12*interConstant::three/interConstant::two;
	static const interval f_3 ("1.333333333333333333333333333333");
	static const interval mdoc_43 = "-0.96120393268995345712165978002";
	interval trunc2 = trunc*trunc;
	series d = dih(x1,x2,x3,x4,x5,x6);
	series augment = d*(f_3 + mdoc_43*trunc2*trunc);
 
	interval xx(x1,x1);
	interval sqrtx = interMath::sqrt(xx);
	interval r = (-interConstant::two*trunc+sqrtx); 
	if (interMath::sup(r)>1.0e-10) 
		{
		if (long_edge_allowed) return augment;
		error::message("inappropriate use of dihVc");
		cout << "sqrtx= " << sqrtx << endl << flush; 
		}
	r = -interMath::pos(-r);
	series s; s.f = -mdoct_12*r*r*(interConstant::four*trunc+sqrtx);
	for (int i=0;i<6;i++) s.Df[i]=interConstant::zero;
	s.Df[0]= -doct_8*interMath::pos(interConstant::four*trunc2-xx)/sqrtx;
	return s*d+augment;
	}

static series permute(series r,int k1,int k2,int k3,int k4,int k5,int k6)
	{
	int i; 
	const int k[6]={k1,k2,k3,k4,k5,k6};
	series u;
	for (i=0;i<6;i++) u.Df[i]= r.Df[k[i]];
	u.f=r.f;
	return u;
	}

static series quoins(double x1,double x2,double x3,double x4,double x5,double x6,
	interval trunc)
	{
	series 	q12 = quoin(x1,x2,x6,trunc),
		q13 = quoin(x1,x3,x5,trunc),
		q21 = quoin(x2,x1,x6,trunc),
		q23 = quoin(x2,x3,x4,trunc),
		q31 = quoin(x3,x1,x5,trunc),
		q32 = quoin(x3,x2,x4,trunc);
	series r12,r13,r21,r23,r31,r32;
	r12=q12;
	r13=permute(q13,0,2,1,3,5,4);
	r21=permute(q21,1,0,2,4,3,5);
	r23=permute(q23,2,0,1,5,3,4);
	r31=permute(q31,1,2,0,4,5,3);
	r32=permute(q32,2,1,0,5,4,3);
	return r12+r13+r21+r23+r31+r32;
	}

static series quoins234(double,double x2,double x3,double x4,double,double,
	interval trunc)
	{
	series 	q23 = quoin(x2,x3,x4,trunc),
		q32 = quoin(x3,x2,x4,trunc);
	series r23,r32;
	r23=permute(q23,2,0,1,5,3,4);
	r32=permute(q32,2,1,0,5,4,3);
	return r23+r32;
	}

series vorVc(double x1,double x2,double x3,double x4,double x5,double x6,
	interval trunc)
	{
	static const interval f_3 ("1.333333333333333333333333333333");
	static const interval mdoc_43 = "-0.96120393268995345712165978002";
	static const interval pi = "3.14159265358979323846264338328";
	static const interval doct4 = -mdoc_43*interConstant::three;
	interval consterm = (f_3 + mdoc_43*trunc*trunc*trunc)*pi;
	series d1 = dihVcAugment(x1,x2,x3,x4,x5,x6,trunc);
	series d2 = dihVcAugment(x2,x1,x3,x5,x4,x6,trunc);
	series d3 = dihVcAugment(x3,x2,x1,x6,x5,x4,trunc);
	interval t; // swap into correct order:
	t=d2.Df[0]; d2.Df[0]=d2.Df[1]; d2.Df[1]=t;
	t=d2.Df[3]; d2.Df[3]=d2.Df[4]; d2.Df[4]=t;
	t=d3.Df[0]; d3.Df[0]=d3.Df[2]; d3.Df[2]=t;
	t=d3.Df[3]; d3.Df[3]=d3.Df[5]; d3.Df[5]=t;
	return d1+d2+d3-quoins(x1,x2,x3,x4,x5,x6,trunc)*doct4-consterm;
	}

series uprightvorVc(double x1,double x2,double x3,double x4,double x5,double x6,
	interval trunc)
	{
	static const interval f_3 ("1.333333333333333333333333333333");
	static const interval mdoc_43 = "-0.96120393268995345712165978002";
	static const interval pi = "3.14159265358979323846264338328";
	static const interval doct4 = -mdoc_43*interConstant::three;
	interval consterm = (f_3 + mdoc_43*trunc*trunc*trunc)*pi;
	series d1 = dihVcAugment(x1,x2,x3,x4,x5,x6,trunc,1);
	series d2 = dihVcAugment(x2,x1,x3,x5,x4,x6,trunc);
	series d3 = dihVcAugment(x3,x2,x1,x6,x5,x4,trunc);
	interval t; // swap into correct order:
	t=d2.Df[0]; d2.Df[0]=d2.Df[1]; d2.Df[1]=t;
	t=d2.Df[3]; d2.Df[3]=d2.Df[4]; d2.Df[4]=t;
	t=d3.Df[0]; d3.Df[0]=d3.Df[2]; d3.Df[2]=t;
	t=d3.Df[3]; d3.Df[3]=d3.Df[5]; d3.Df[5]=t;
	return d1+d2+d3-quoins234(x1,x2,x3,x4,x5,x6,trunc)*doct4-consterm;
	}

series VorVc(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	static const interval t("1.255");
	return vorVc(x1,x2,x3,x4,x5,x6,t);
	}

series uprightVorVc(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	static const interval t("1.255");
	return uprightvorVc(x1,x2,x3,x4,x5,x6,t);
	}

series swap_uprightVorVc(double x1,double x2,double x3,double x4,double x5,
	double x6)
	{
	int i;
	series s = uprightVorVc(x1,x6,x5,x4,x3,x2);
	series t;
	t.f = s.f;
	int k[6]= {0,5,4,3,2,1};
	for (i=0;i<6;i++) t.Df[i]=s.Df[k[i]];
	return t;
	}

series VorSqc(double x1,double x2,double x3,double x4,double x5,double x6)
	{
	static const interval t("1.41421356237309504880168872421");
	return vorVc(x1,x2,x3,x4,x5,x6,t);
	}

double x6inf(double x1,double x2,double x3,double x5)
	{
	interMath::up();
	double u123 = (-x1)*x1+(-x2)*x2+(-x3)*x3+2.0*(x1*x2+x1*x3+x2*x3);
	double u135 = (-x1)*x1+(-x3)*x3+(-x5)*x5+2.0*(x1*x3+x1*x5+x3*x5);
	double sq = sqrt(u123*u135);
	interMath::down();
	double num = x1*x1 +(-x1)*x2 + 2.0*x1*x3 + x2*x3 +(-x3)*x3 
		+(-x1)*x5 + x2*x5 + x3*x5 - sq;
	return num/(2.0*x3);
	}

// double version.
static double delta(int,double x1,double x2,double x3,double x4,double x5,
	double x6)
	{
	return 
	 -(x2*x3*x4) - x1*x3*x5 - x1*x2*x6 - x4*x5*x6 + 
   x3*(x1 + x2 - x3 + x4 + x5 - x6)*x6 + 
   x2*x5*(x1 - x2 + x3 + x4 - x5 + x6) + x1*x4*(-x1 + x2 + x3 - x4 + x5 + x6);
	}

// double version.
static double deltasup(double x1,double x2,double x3,double x4,double x5,
	double x6)
	{
	interMath::up();
	return 
	 ((-x2)*x3)*x4 +((- x1)*x3)*x5 +((- x1)*x2)*x6 +((- x4)*x5)*x6 + 
   x3*(x1 + x2 + x4 + x5)*x6 +  (x3*(-x3-x6))*x6 +
   x2*x5*(x1 + x3 + x4 + x6) + x2*(x5*(-x2-x5)) +
	x1*x4*(x2 + x3 + x5 + x6)+ x1*(x4*(-x1-x4));
	}


// double version
static double dihedral(double x1,double x2,double x3,double x4,double x5,
	double x6)
	{
	static const double pi2= 1.57079632679489661923132169164;
	 double t = -(-(x2*x3) - x1*x4 + x2*x5 + x3*x6 - x5*x6 + 
      x1*(-x1 + x2 + x3 - x4 + x5 + x6));
	double u = x1*delta(0,x1,x2,x3,x4,x5,x6);
	if (u<0.0) return 2.0*pi2;
	t = t/(2.0*sqrt(u));
	return atan(t) + pi2;
	}

// double version
static double dihedralinf(double x1,double x2,double x3,double x4,double x5,
	double x6)
	{
	static const interval pi2("1.57079632679489661923132169164");
	double t;
	interMath::down();
	t  = (x2*x3) + x1*x4 + (-x2)*x5 +(-x3)*x6 + x5*x6 + 
		      x1*(x1 + x4)+ x1*(-x2-x3-x5-x6);
		double u = deltasup(x1,x2,x3,x4,x5,x6);
		if (u<0.0) error::message("dihedral inf sqrt error");
		interMath::up();
		double den = sqrt(u*x1)*2.0;
		interMath::down();
		t = t/den;
		return interMath::inf(interMath::atan(interval(t,t))) 
				+ interMath::inf(pi2);
		}

static double gg(double x0min,double x0pmin,double x1,double x2,double x3min,
	double x4,double x4p,double x5,double x5p)
	{
	static const double pi2=6.28318530717958647692528676656;
	return dihedral(x3min,x4,x2,x0min,x1,x5)+
	  dihedral(x3min,x4,x4p,x3min,x5p,x5)+
	  dihedral(x3min,x4p,x2,x0pmin,x1,x5p)-pi2;
	}

static double gginf(double x0min,double x0pmin,double x1,double x2,double x3min,
	double x4,double x4p,double x5,double x5p)
	{
	static const interval pi2("6.28318530717958647692528676656");
	double d1=dihedralinf(x3min,x4,x2,x0min,x1,x5),
	  d2= dihedralinf(x3min,x4,x4p,x3min,x5p,x5),
	  d3 = dihedralinf(x3min,x4p,x2,x0pmin,x1,x5p);
	interMath::down();
	return d1+d2+d3-interMath::sup(pi2);
	}

static int x1supDELTA(double x2,double x3,double x5,double x6,double& x1)
	{
	double a0 =  (x2 - x3 + x5 - x6)*(-(x2*x5) + x3*x6);
	double a1 =  -(x2*x3) + 2*x2*x5 - x3*x5 - x2*x6 + 2*x3*x6 - x5*x6;
	double a2 =  x2 + x3 + x5 + x6;
	double a3 = -2.0;
	double t = 12.9; // 12.9 > 6.301*2, so it is an upper bd on x1.
	double t2;
	if ((x2<4.0)||(x3<4.0)||(x5<4.0)||(x6<4.0)
		||(x2>6.301)||(x3>6.301)||(x5>6.301)||(x6>6.301))
		{
		x1 = 8.0;
		return 0;
		}
	for (int i=0;i<5;i++) // Newton's method
		// partial convergents are upper bounds because the
		// second derivative is negative (when x1>x2,x3,x5,x6).
		{
		t2 = t*t;
		t = t - (a0+a1*t+a2*t2+a3*t2*t)/(a1+2.0*a2*t+3.0*a3*t2);
		}
	x1 = t+ 1.0e-8; // add an epsilon;
	if (x1<7.9) return 0; 
	// now verify the result rigorously by computing delta.
	double tH= deltasup(x1,x2,x3,x1,x5,x6);
	if (tH>0.0) return 0;
	return 1;
	}

// return 1 if we successfully set x3 to an upper bound.
int x1sup(double x0min,double x0pmin,double x1,double x2,double x3min,
	double& x3,double x4,double x4p,double x5,double x5p)
	{
	double t;
	if (x1supDELTA(x4,x5,x4p,x5p,t))
		{
		if (t< x3min) { x3=t; return 1; }
		if (t< x3) x3 = t;
		}
	double t0=x3min,t1=x3,g0,g1;
	g1=gg(x0min,x0pmin,x1,x2,t1,x4,x4p,x5,x5p);
	if (g1<0.0) return 1;
	g0=gg(x0min,x0pmin,x1,x2,t0,x4,x4p,x5,x5p);
	if (g0>0.0)
		{
		x3=t0; 
		t0 = t0-1.0e-5;
		g0=gg(x0min,x0pmin,x1,x2,t0,x4,x4p,x5,x5p);
		if (g0>0.0)  x3=t0;
		return 1;
		}
	// now we have mixed signs, approximate the root:
	double tr,gr,th,gh;
	for (int i=0;i<4;i++) // numerical approximation to the root:
			// close in with secant and tangent(Newton).
	{
	tr = t0 - g0*(t1-t0)/(g1-g0); // secant root;
	gr = gg(x0min,x0pmin,x1,x2,tr,x4,x4p,x5,x5p);
	if (gr>0.0) { t1=tr; g1=gr; } else { t0=tr; g0 = gr; }
	th = t0+ 1.0e-6;
	gh =  gg(x0min,x0pmin,x1,x2,th,x4,x4p,x5,x5p);
	if ((gh>0.0)&&(th<t1)) { t1 = th; g1=gh; }
	tr = t0 - gh*(t0-th)/(g0-gh); // approx tangent root;
	if ((tr>t0)&&(tr<t1))
		{
		gr = gg(x0min,x0pmin,x1,x2,tr,x4,x4p,x5,x5p);
		if (gr>0.0) { t1=tr; g1=gr; } else { t0=tr; g0 = gr; }
		}
	}
	if (t1<x3) x3 = t1+1.0e-05;
	// check that gginf(...) > 0 rigorously
	if ((deltasup(x3,x2,x4,x0min,x5,x1)<=0.0)||
	    (deltasup(x3,x2,x4p,x0pmin,x5p,x1)<=0.0)||
	    (deltasup(x3,x4,x4p,x3,x5p,x5)<=0.0)) return 1;
	if (gginf(x0min,x0pmin,x1,x2,x3,x4,
		x4p,x5,x5p)<0.0) return 0;
	return 1;
	}

int x4_upper_from_dih_upper(const double x[6],const double z[6],double theta,
	double& new_x4_upper)
	{
	// if we have an upper bound (theta) on the dihedral angle on a cell,
	// we can use that to compute an upper bound on the length of
	// the edge x4 (new_x4_upper).
	// This lemma relies on an embedded lemma, which was proved by hand, 
	// establishing the
	//  monotonicity of the dihedral angle in its edge lengths
	//  when y1,y4>=2.51, y2,y3,y4,y6 in [2,2.51].
	double x1=x[0], x2=z[1], x3=z[2], x4=x[3], x5=z[4], x6=z[5];
	if ((x1<6.3)||(x4<6.3)||(x2<4)||(x3<4)||(x5<4)||(x6<4)||
		(x2>6.31)||(x3>6.31)||(x5>6.31)||(x6>6.31))
		{
		error::message("variables out of range in x4_upper");
		return 0;
		}
	// get rough guess with double, check later.
	// we are inverting for t: dih(x1,x2,x3,t,x5,x6)==theta;
	// denom of cosdih.
	double den = (x1*x1 - 2.0*x1*x3 + x3*x3 - 2.0*x1*x5 - 2.0*x3*x5 + x5*x5)
                *(x1*x1 - 2.0*x1*x2 + x2*x2 - 2.0*x1*x6 - 2.0*x2*x6 + x6*x6);
	if (den<0.0) { error::message("unexpected neg denom"); return 0; }
	double rhs = cos(theta)*sqrt(den);
	// D[delta,x4] = -2x1x4 + b:
	double b = -x1*x1 + x1*x2 + x1*x3 - x2*x3 + 
			x1*x5 + x2*x5 + x1*x6 + x3*x6 - x5*x6;
	double trialx = (b-rhs)/(2.0*x1);
	double eps = 0.0001;
	trialx += eps; // We don't need a terribly good upper bound, but it
		// must be an upper bound.
	series dihx = dih(x1,x2,x3,trialx,x5,x6);
	new_x4_upper=trialx;
	if (interMath::inf(dihx.f) > theta) return 1;
	return 0;
	}

class hyperIntervalTest {
public:
	hyperIntervalTest() {
	cout << " -- loading hyperInterval routines\n" << flush;
	// blah blah
	}
};

static hyperIntervalTest E;
@
