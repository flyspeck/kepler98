head	1.2;
access;
symbols;
locks
	hales:1.2; strict;
comment	@// @;


1.2
date	97.12.23.00.41.01;	author hales;	state Exp;
branches;
next	1.1;

1.1
date	97.09.13.18.13.29;	author hales;	state Exp;
branches;
next	;


desc
@interval pakcage, test routines
@


1.2
log
@Minor modifications made.
@
text
@#include "error.h"
#include <iomanip.h>
#include "interval.h"
#include "lineInterval.h"
#include "secondDerive.h"
#include "taylorInterval.h"
#include "recurse.h"

void selfTest()
	{
	interMath::selfTest();
	linearization::selfTest();
	secondDerive::selfTest();
	taylorFunction::selfTest();
	}

int testRun()
	{
	interval tx[6]={"4","4","4","6.3001","4","4"};
	interval tz[6]={"6.3001","6.3001","6.3001","6.3001","6.3001","6.3001"};
	domain x = domain::lowerD(tx);
	domain z = domain::upperD(tz);
	taylorFunction F = taylorSimplex::dih*"-1"+taylorSimplex::unit*"1.153093";
	F.setReducibleState(1);
	return prove::generic (x,z,F);
	}

main()
	{
	selfTest();
	cout.precision(20);
	//if (testRun()) 
		//cout << "YES!"; else cout << "NO!" ;
	cout << "\nhello" << endl;
	}
@


1.1
log
@Initial revision
@
text
@d4 23
a26 1
#include "hyperInterval.h"
d30 5
a34 1
	cout << "hello";
@
