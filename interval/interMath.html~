<html><head><title>interMath Documentation</title></head>
<body><h1>
<a name="topofdoc"><img src="diag2min.gif">interMath</a></h1>
<dl>
<dd>
	Interval versions of standard math library functions


</dl>
<hr><p></p>
<p><strong>[ 
<a href="kepler.html">kepler</a> | 
<a href="interval.h">Source</a> | 
<a href="/keyweb.html">Keywords</a> | 
<a href="#aag">Summary</a> | <a href="#parents">Ancestors</a> | <a href="#flat">All Members</a> | <a href="#children">Descendants</a>  ]</strong><p>
<h2><a name="quickind">Quick Index</a></h2>
<dl>
<dd><a href="#OVERVIEW_TEXT">OVERVIEW TEXT</a>
<dd><a href="#AUTHOR">AUTHOR</a>
</dl>
<a name="aag"><hr><p></p></a><h2>Class Summary</h2>
class interMath <br>
 {
<br>
<br><i><b>public</b></i>:
<dl>
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_min(interval,interval)$">min</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_min(interval,interval,interval)$">min</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_min(interval,interval,interval,interval)$">min</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_max(interval,interval)$">max</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_max(interval,interval,interval)$">max</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_max(interval,interval,interval,interval)$">max</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_combine(interval,interval)$">combine</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_sqrt(interval)$">sqrt</a>(<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_atan(interval)$">atan</a>(<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_pos(interval_x)$">pos</a>(<a href="interval.html">interval</a> x);
<dd><strong>static</strong> double <a href="interMath.html#double_sup(interval_x)$">sup</a>(<a href="interval.html">interval</a> x);
<dd><strong>static</strong> double <a href="interMath.html#double_inf(interval_x)$">inf</a>(<a href="interval.html">interval</a> x);
<dd><strong>static</strong> double <a href="interMath.html#double_abs(interval_x)$">abs</a>(<a href="interval.html">interval</a> x);
<dd><strong>static</strong> volatile void <a href="interMath.html#volatile_void_nearest()$">nearest</a>();
<dd><strong>static</strong> volatile void <a href="interMath.html#volatile_void_up()$">up</a>();
<dd><strong>static</strong> volatile void <a href="interMath.html#volatile_void_down()$">down</a>();
<dd><strong>static</strong> int <a href="interMath.html#int_boundedFromZero(const_interval&amp)$">boundedFromZero</a>(const <a href="interval.html">interval</a>&amp);
<dd><strong>static</strong> void <a href="interMath.html#void_selfTest()$">selfTest</a>();
</dl>
<i><b>protected</b></i>:
<dl>
</dl>
}; // interMath <p>
<p>Back to the <a href="#topofdoc">top</a> of  <i>interMath</i><p>
<a name="OVERVIEW_TEXT"><hr><p></p></a><h3>OVERVIEW TEXT</h3>
	The functions <a href="#volatile_void_up()$">up</a>(), <a href="#volatile_void_down()$">down</a>(), <a href="#volatile_void_nearest()$">nearest</a>() set the rounding modes for
	arithmetic operations.
<p>
	<a href="#interval_combine(interval,interval)$">combine</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>) gives the convex hull of two intervals
	<a href="#double_abs(interval_x)$">abs</a>(<a href="interval.html">interval</a>) is a double giving the maximum absolute value on the <a href="interval.html">interval</a>
<p>
<p>Back to the <a href="#topofdoc">top</a> of  <i>interMath</i><p>
<a name="AUTHOR"><hr><p></p></a><h3>AUTHOR</h3>
	Thomas C. Hales
<p>
<p>Back to the <a href="#topofdoc">top</a> of  <i>interMath</i><p>
<a name="interval_min(interval,interval)$"><hr><p></p><h3>interval min(interval,interval);</h3></a>
		   the return value is an <a href="interval.html">interval</a> of width zero
<p>
<p><pre>
	static <a href="interval.html">interval</a> <a href="#interval_min(interval,interval)$">min</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);  
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="interval_min(interval,interval,interval)$"><hr><p></p><h3>interval min(interval,interval,interval);</h3></a>
		   the return value is an <a href="interval.html">interval</a> of width zero
<p>
<p><pre>
	static <a href="interval.html">interval</a> <a href="#interval_min(interval,interval)$">min</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="interval_min(interval,interval,interval,interval)$"><hr><p></p><h3>interval min(interval,interval,interval,interval);</h3></a>
		   the return value is an <a href="interval.html">interval</a> of width zero
<p>
<p><pre>
	static <a href="interval.html">interval</a> <a href="#interval_min(interval,interval)$">min</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="interval_max(interval,interval)$"><hr><p></p><h3>interval max(interval,interval);</h3></a>
		   the return value is an <a href="interval.html">interval</a> of width zero
<p>
<p><pre>
	static <a href="interval.html">interval</a> <a href="#interval_max(interval,interval)$">max</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="interval_max(interval,interval,interval)$"><hr><p></p><h3>interval max(interval,interval,interval);</h3></a>
		   the return value is an <a href="interval.html">interval</a> of width zero
<p>
<p><pre>
	static <a href="interval.html">interval</a> <a href="#interval_max(interval,interval)$">max</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="interval_max(interval,interval,interval,interval)$"><hr><p></p><h3>interval max(interval,interval,interval,interval);</h3></a>
		   the return value is an <a href="interval.html">interval</a> of width zero
<p>
<p><pre>
	static <a href="interval.html">interval</a> <a href="#interval_max(interval,interval)$">max</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="interval_combine(interval,interval)$"><hr><p></p><h3>interval combine(interval,interval);</h3></a>
		   the <a href="interval.html">interval</a> returned is the convex hull of the two that are given
<p>
<p><pre>
	static <a href="interval.html">interval</a> <a href="#interval_combine(interval,interval)$">combine</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>); 
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="interval_sqrt(interval)$"><hr><p></p><h3>interval sqrt(interval);</h3></a>
		   an <a href="interval.html">interval</a> square root function.  The square root function has
		   been extended to return 0 for negative values in the <a href="domain.html">domain</a>, so
		   that <a href="#interval_sqrt(interval)$">sqrt</a>([-1,4]), for example, returns the <a href="interval.html">interval</a> [0,2].
		   The implementation makes use of the math.h sqrt library function.
		   The IEEE standard requires the library function to return a
		   correctly rounded result when the rounding modes are set.
<p>
<p><pre>
	static <a href="interval.html">interval</a> <a href="#interval_sqrt(interval)$">sqrt</a>(<a href="interval.html">interval</a>);  // negative values return 0
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="interval_atan(interval)$"><hr><p></p><h3>interval atan(interval);</h3></a>
		   An <a href="interval.html">interval</a> atan function.  The IEEE standard does not specify
		   the performance of the math.h atan library function.  As a result,
		   we have implemented our own from scratch.  This implementation
		   is based on an old book by John F. Hart, "Computer Approximations"
		   page 125 (s=4).  The rational approximation that we use is
		   given on page 271, ArcTan 5032.
<p>
		   The routine uses the addition law for the arctangent to
		   reduce the argument to the <a href="interval.html">interval</a> [0,tan(pi/16)].  A rational
		   approximation to the arctangent is then used on the <a href="interval.html">interval</a>.
		   Explicit <a href="error.html">error</a> bounds are known for this rational approximation.
		   The results of the rational approximation are padded with
		   a much-to-generous <a href="error.html">error</a> term so that the <a href="interval.html">interval</a> returned
		   by the procedure is guaranteed to contain the arctangent
		   of the argument.
<p>
		   The <a href="error.html">error</a> term we have added is enormous (about 1.0e-10). It is
		   far larger than what the <a href="error.html">error</a> analysis requires, and the user
		   of this function may wish to suppy a smaller <a href="error.html">error</a> term.
<p>
<p><pre>
	static <a href="interval.html">interval</a> <a href="#interval_atan(interval)$">atan</a>(<a href="interval.html">interval</a>);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="interval_pos(interval_x)$"><hr><p></p><h3>interval pos(interval x);</h3></a>
		   the function [x,y] -> [<a href="#interval_max(interval,interval)$">max</a>(0,x),<a href="#interval_max(interval,interval)$">max</a>(0,y)]. The positive part of
		   an <a href="interval.html">interval</a>.
<p>
<p><pre>
	static inline <a href="interval.html">interval</a> <a href="#interval_pos(interval_x)$">pos</a>(<a href="interval.html">interval</a> x); 
</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="double_sup(interval_x)$"><hr><p></p><h3>double sup(interval x);</h3></a>
		   the upper endpoint of an <a href="interval.html">interval</a>
<p>
<p><pre>
	static inline double <a href="#double_sup(interval_x)$">sup</a>(<a href="interval.html">interval</a> x); // (hi)
</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="double_inf(interval_x)$"><hr><p></p><h3>double inf(interval x);</h3></a>
		   the lower endpoint of an <a href="interval.html">interval</a>
<p>
<p><pre>
	static inline double <a href="#double_inf(interval_x)$">inf</a>(<a href="interval.html">interval</a> x); // (lo)
</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="double_abs(interval_x)$"><hr><p></p><h3>double abs(interval x);</h3></a>
		   the largest absolute value of any element in the <a href="interval.html">interval</a>
<p>
<p><pre>
	static inline double <a href="#double_abs(interval_x)$">abs</a>(<a href="interval.html">interval</a> x); 
</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="volatile_void_nearest()$"><hr><p></p><h3>volatile void nearest();</h3></a>
		   set the IEEE rounding mode to round-to-nearest.  The 
		   mode remains in force until the next mode change.
<p>
<p><pre>
	static volatile void <a href="#volatile_void_nearest()$">nearest</a>();
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="volatile_void_up()$"><hr><p></p><h3>volatile void up();</h3></a>
		   set the IEEE rounding mode to round-up.  The mode
		   stays in effect until the next mode change.
<p>
<p><pre>
	static volatile void <a href="#volatile_void_up()$">up</a>();
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="volatile_void_down()$"><hr><p></p><h3>volatile void down();</h3></a>
		   Set the IEEE rounding mode to round-down. The mode
		   stays in effect until the next mode change.
<p>
<p><pre>
	static volatile void <a href="#volatile_void_down()$">down</a>();
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="int_boundedFromZero(const_interval&amp)$"><hr><p></p><h3>int boundedFromZero(const interval&amp);</h3></a>
		   Check to see if the <a href="interval.html">interval</a> can be safely used as
		   a denominator. This is the inline function called by
		   the <a href="interval.html">interval</a> division operator to determine whether
		   a division can be performed.
<p>
<p><pre>
	static inline int <a href="#int_boundedFromZero(const_interval&amp)$">boundedFromZero</a>(const <a href="interval.html">interval</a>&amp);
</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="void_selfTest()$"><hr><p></p><h3>void selfTest();</h3></a>
		   Check that <a href="interval.html">interval</a> routines are running correctly.
<p>
<p><pre>
	static void <a href="#void_selfTest()$">selfTest</a>();
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> interMath </i> <p>
<a name="flat"><hr><p></p></a>
<h2>All Members</h2>
<dl>
<dt><strong>public:</strong>
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_min(interval,interval)$">min</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_min(interval,interval,interval)$">min</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_min(interval,interval,interval,interval)$">min</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_max(interval,interval)$">max</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_max(interval,interval,interval)$">max</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_max(interval,interval,interval,interval)$">max</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_combine(interval,interval)$">combine</a>(<a href="interval.html">interval</a>,<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_sqrt(interval)$">sqrt</a>(<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_atan(interval)$">atan</a>(<a href="interval.html">interval</a>);
<dd><strong>static</strong> <a href="interval.html">interval</a> <a href="interMath.html#interval_pos(interval_x)$">pos</a>(<a href="interval.html">interval</a> x);
<dd><strong>static</strong> double <a href="interMath.html#double_sup(interval_x)$">sup</a>(<a href="interval.html">interval</a> x);
<dd><strong>static</strong> double <a href="interMath.html#double_inf(interval_x)$">inf</a>(<a href="interval.html">interval</a> x);
<dd><strong>static</strong> double <a href="interMath.html#double_abs(interval_x)$">abs</a>(<a href="interval.html">interval</a> x);
<dd><strong>static</strong> volatile void <a href="interMath.html#volatile_void_nearest()$">nearest</a>();
<dd><strong>static</strong> volatile void <a href="interMath.html#volatile_void_up()$">up</a>();
<dd><strong>static</strong> volatile void <a href="interMath.html#volatile_void_down()$">down</a>();
<dd><strong>static</strong> int <a href="interMath.html#int_boundedFromZero(const_interval&amp)$">boundedFromZero</a>(const <a href="interval.html">interval</a>&amp);
<dd><strong>static</strong> void <a href="interMath.html#void_selfTest()$">selfTest</a>();
<dt><strong>protected:</strong>
</dl>
<p>Back to the <a href="#topofdoc">top</a> of  interMath<p>
<a name="parents"><hr><p></p></a>
<h2>Ancestors</h2>
Class does not inherit from any other class.<p>
<p>Back to the <a href="#topofdoc">top</a> of  interMath<p>
<a name="children"><hr><p></p></a>
<h2>Descendants</h2>
Class is not inherited by any others.<p>
<p>Back to the <a href="#topofdoc">top</a> of  interMath<p>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Dec 22 19:37:21 1997
.<p>
<address>Report <a href="mailto:jkotula@unimax.com">problems</a> to jkotula@unimax.com</address>
</body></html>
