//  copyright (c) 1997, Thomas C. Hales, all rights reserved.

#ifdef HYPERINTERVAL_H
#ifndef HYPERINTERVAL_INLINE_H
#define HYPERINTERVAL_INLINE_H

#include "interval.h"

inline hyperInterval operator*
		(const hyperInterval& a,const hyperInterval& b)
        {
        hyperInterval temp;
        temp.f = b.f*a.f;
        int i;
        for (i=0;i<6;i++) temp.Df[i]= b.f*a.Df[i]+a.f*b.Df[i];
        return temp;
        }

inline hyperInterval operator*
		(const hyperInterval& b,const interval& a)
        {
        hyperInterval temp;
        temp.f = b.f*a;
        for (int i=0;i<6;i++) temp.Df[i]= b.Df[i]*a;
        return temp;
        }

inline hyperInterval operator/
		(const hyperInterval& b,const hyperInterval& a)
        {
        hyperInterval temp;
        interval ra = interConstant::one/a.f;
        temp.f = b.f*ra;
        interval ra2 = ra*ra;
        for (int i=0;i<6;i++) temp.Df[i]= (b.Df[i]*a.f - a.Df[i]*b.f)*ra2;
        return temp;
        }

inline hyperInterval operator+
		(const hyperInterval& b,const hyperInterval& a)
        {
        hyperInterval temp;
        temp.f = b.f+a.f;
        int i;
        interMath::up();
        for (i=0;i<6;i++) temp.Df[i].hi=b.Df[i].hi+a.Df[i].hi;
        interMath::down();
        for (i=0;i<6;i++) temp.Df[i].lo=b.Df[i].lo+a.Df[i].lo;
        return temp;
        }

inline hyperInterval operator-(const hyperInterval& a)
        {
        hyperInterval temp;
        temp.f = -a.f;
        int i;
        for (i=0;i<6;i++) temp.Df[i]=-a.Df[i];
        return temp;
        }

inline hyperInterval operator-
		(const hyperInterval& b,const hyperInterval& a)
        {
        hyperInterval temp;
        temp.f = b.f- a.f;
        int i;
        interMath::up();
        for (i=0;i<6;i++) temp.Df[i].hi=b.Df[i].hi-a.Df[i].lo;
        interMath::down();
        for (i=0;i<6;i++) temp.Df[i].lo=b.Df[i].lo-a.Df[i].hi;
        return temp;
        }





#endif
#endif
