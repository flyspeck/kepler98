<html><head><title>taylorInterval Documentation</title></head>
<body><h1>
<a name="topofdoc"><img src="diag2min.gif">taylorInterval</a></h1>
<dl>
<dd>
	An <a href="interval.html">interval</a>-based linear approximation	with explicit <a href="error.html">error</a> bounds.


</dl>
<hr><p></p>
<p><strong>[ 
<a href="kepler.html">kepler</a> | 
<a href="taylorInterval.h">Source</a> | 
<a href="/keyweb.html">Keywords</a> | 
<a href="#aag">Summary</a> | <a href="#parents">Ancestors</a> | <a href="#flat">All Members</a> | <a href="#children">Descendants</a>  ]</strong><p>
<h2><a name="quickind">Quick Index</a></h2>
<dl>
<dd><a href="#OVERVIEW_TEXT">OVERVIEW TEXT</a>
<dd><a href="#AUTHOR">AUTHOR</a>
</dl>
<a name="aag"><hr><p></p></a><h2>Class Summary</h2>
class taylorInterval<br>
<br>
 {
<br>
<br><i><b>public</b></i>:
<dl>
<dd>int <a href="taylorInterval.html#int_isValidData()_const$">isValidData</a>() const;
<dd><a href="lineInterval.html">lineInterval</a> <a href="taylorInterval.html#lineInterval_center()_const$">center</a>() const;
<dd>double <a href="taylorInterval.html#double_upperBound()_const$">upperBound</a>() const;
<dd>double <a href="taylorInterval.html#double_lowerBound()_const$">lowerBound</a>() const;
<dd><strong>static</strong> double <a href="taylorInterval.html#double_upperboundQ_(const_taylorInterval&amp_cA,const_taylorInterval&amp_cB)$">upperboundQ</a> (const taylorInterval&amp cA,const taylorInterval&amp cB);
<dd><strong>static</strong> double <a href="taylorInterval.html#double_lowerboundQ_(const_taylorInterval&amp_cA,const_taylorInterval&amp_cB)$">lowerboundQ</a> (const taylorInterval&amp cA,const taylorInterval&amp cB);
<dd>double <a href="taylorInterval.html#double_upperPartial(int)_const$">upperPartial</a>(int) const;
<dd>double <a href="taylorInterval.html#double_lowerPartial(int)_const$">lowerPartial</a>(int) const;
<dd><a href="taylorInterval.html#taylorInterval(int,const_lineInterval&amp,_const_domain&amp,_const_double_[6][6])$">taylorInterval</a>(int,const <a href="lineInterval.html">lineInterval</a>&amp, const <a href="domain.html">domain</a>&amp, const double [6][6]);
</dl>
<i><b>protected</b></i>:
<dl>
</dl>
}; // taylorInterval <p>
<p>Back to the <a href="#topofdoc">top</a> of  <i>taylorInterval</i><p>
<a name="OVERVIEW_TEXT"><hr><p></p></a><h3>OVERVIEW TEXT</h3>
<p>
	A taylorInterval is a souped-up version of <a href="lineInterval.html">lineInterval</a>, which
	in turn is an enhancement of <a href="interval.html">interval</a>.  A taylorInterval is
	an <a href="interval.html">interval</a> version of a linear approximation to a function with
	explicit bounds on the <a href="error.html">error</a> term.
<p>
	Because <a href="error.html">error</a> terms on the second derivatives are included, 
	explicit lower and upper bounds, as well as bounds on the
	derivatives can be determined.
<p>
	A taylorInterval may contain invalid data, meaning that <a href="error.html">error</a>
	bounds were impossible to obtain on the given <a href="domain.html">domain</a>.  Calling
	most of the functions will result in an <a href="error.html">error</a> if the data is
	invalid.  To avoid the <a href="error.html">error</a> messages, check the data with
	the member function <a href="#int_isValidData()_const$">isValidData</a>().
<p>
<p>Back to the <a href="#topofdoc">top</a> of  <i>taylorInterval</i><p>
<a name="AUTHOR"><hr><p></p></a><h3>AUTHOR</h3>
<p>
	Thomas C. Hales
<p>Back to the <a href="#topofdoc">top</a> of  <i>taylorInterval</i><p>
<a name="int_isValidData()_const$"><hr><p></p><h3>int isValidData() const;</h3></a>
	   Return a nonzero value if the data is valid, 0 otherwise.
<p>
<p><pre>
int <a href="#int_isValidData()_const$">isValidData</a>() const;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> taylorInterval </i> <p>
<a name="lineInterval_center()_const$"><hr><p></p><h3>lineInterval center() const;</h3></a>
	   Taylor <a href="interval.html">interval</a> is a linear approximation at the center of
	   a cell with explicit <a href="error.html">error</a> bounds.  <a href="#lineInterval_center()_const$">center</a>() is the
	   <a href="lineInterval.html">lineInterval</a> giving the linear approximation at the center of the
	   cell.
<p>
<p><pre>
<a href="lineInterval.html">lineInterval</a> <a href="#lineInterval_center()_const$">center</a>() const;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> taylorInterval </i> <p>
<a name="double_upperBound()_const$"><hr><p></p><h3>double upperBound() const;</h3></a>
	   A rigorous upper bound on the value over the entire cell.
<p>
<p><pre>
double <a href="#double_upperBound()_const$">upperBound</a>() const;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> taylorInterval </i> <p>
<a name="double_lowerBound()_const$"><hr><p></p><h3>double lowerBound() const;</h3></a>
	   A rigorous lower bound on the value over an entire cell.
<p>
<p><pre>
double <a href="#double_lowerBound()_const$">lowerBound</a>() const;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> taylorInterval </i> <p>
<a name="double_upperboundQ_(const_taylorInterval&amp_cA,const_taylorInterval&amp_cB)$"><hr><p></p><h3>double upperboundQ (const taylorInterval&amp cA,const taylorInterval&amp cB);</h3></a>
	   A rigorous upper bound on the combined value of two simplices
	   sharing edges 2,3,4.  In general this bound will be better
	   than combining the bounds for the two separate simplices.
<p>
<p><pre>
static double upperboundQ
    (const taylorInterval&amp cA,const taylorInterval&amp cB);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> taylorInterval </i> <p>
<a name="double_lowerboundQ_(const_taylorInterval&amp_cA,const_taylorInterval&amp_cB)$"><hr><p></p><h3>double lowerboundQ (const taylorInterval&amp cA,const taylorInterval&amp cB);</h3></a>
	   A rigorous lower bound on the combined value of two simplices
	   sharing edges 2,3,4.  In general this bound will be better
	   than combining the bounds for the two separate simplices.
<p>
<p><pre>
static double lowerboundQ
    (const taylorInterval&amp cA,const taylorInterval&amp cB);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> taylorInterval </i> <p>
<a name="double_upperPartial(int)_const$"><hr><p></p><h3>double upperPartial(int) const;</h3></a>
	   A rigorous upper bound on the ith partial derivative over the 
	   entire cell.
<p>
<p><pre>
double <a href="#double_upperPartial(int)_const$">upperPartial</a>(int) const;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> taylorInterval </i> <p>
<a name="double_lowerPartial(int)_const$"><hr><p></p><h3>double lowerPartial(int) const;</h3></a>
	   A rigorous lower bound on the ith partial deriviative over the
	   entire cell.
<p>
<p><pre>
double <a href="#double_lowerPartial(int)_const$">lowerPartial</a>(int) const;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> taylorInterval </i> <p>
<a name="taylorInterval(int,const_lineInterval&amp,_const_domain&amp,_const_double_[6][6])$"><hr><p></p><h3>taylorInterval(int,const lineInterval&amp, const domain&amp, const double [6][6]);</h3></a>
	   A constructor, taking the <a href="lineInterval.html">lineInterval</a> at the center,
	   a bound on the half-widths of the cell (<a href="domain.html">domain</a>&),
	   an an array [][] of doubles giving bounds on the second derivatives
	   the first argument is nonzero or zero depending on whether the
	   input is valid or not.
<p><pre>
<a href="#taylorInterval(int,const_lineInterval&amp,_const_domain&amp,_const_double_[6][6])$">taylorInterval</a>(int,const <a href="lineInterval.html">lineInterval</a>&amp, const <a href="domain.html">domain</a>&amp,
        const double [6][6]);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> taylorInterval </i> <p>
<a name="flat"><hr><p></p></a>
<h2>All Members</h2>
<dl>
<dt><strong>public:</strong>
<dd>int <a href="taylorInterval.html#int_isValidData()_const$">isValidData</a>() const;
<dd><a href="lineInterval.html">lineInterval</a> <a href="taylorInterval.html#lineInterval_center()_const$">center</a>() const;
<dd>double <a href="taylorInterval.html#double_upperBound()_const$">upperBound</a>() const;
<dd>double <a href="taylorInterval.html#double_lowerBound()_const$">lowerBound</a>() const;
<dd><strong>static</strong> double <a href="taylorInterval.html#double_upperboundQ_(const_taylorInterval&amp_cA,const_taylorInterval&amp_cB)$">upperboundQ</a> (const taylorInterval&amp cA,const taylorInterval&amp cB);
<dd><strong>static</strong> double <a href="taylorInterval.html#double_lowerboundQ_(const_taylorInterval&amp_cA,const_taylorInterval&amp_cB)$">lowerboundQ</a> (const taylorInterval&amp cA,const taylorInterval&amp cB);
<dd>double <a href="taylorInterval.html#double_upperPartial(int)_const$">upperPartial</a>(int) const;
<dd>double <a href="taylorInterval.html#double_lowerPartial(int)_const$">lowerPartial</a>(int) const;
<dt><strong>protected:</strong>
</dl>
<p>Back to the <a href="#topofdoc">top</a> of  taylorInterval<p>
<a name="parents"><hr><p></p></a>
<h2>Ancestors</h2>
Class does not inherit from any other class.<p>
<p>Back to the <a href="#topofdoc">top</a> of  taylorInterval<p>
<a name="children"><hr><p></p></a>
<h2>Descendants</h2>
Class is not inherited by any others.<p>
<p>Back to the <a href="#topofdoc">top</a> of  taylorInterval<p>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Dec 22 19:37:25 1997
.<p>
<address>Report <a href="mailto:jkotula@unimax.com">problems</a> to jkotula@unimax.com</address>
</body></html>
