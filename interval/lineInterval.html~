<html><head><title>lineInterval Documentation</title></head>
<body><h1>
<a name="topofdoc"><img src="diag2min.gif">lineInterval</a></h1>
<dl>
<dd>
	A lineInterval is an <a href="interval.html">interval</a> version of a linear approximation to a 
	function.  Many of the functions in the Kepler library return
	lineIntervals.


</dl>
<hr><p></p>
<p><strong>[ 
<a href="kepler.html">kepler</a> | 
<a href="lineInterval.h">Source</a> | 
<a href="/keyweb.html">Keywords</a> | 
<a href="#aag">Summary</a> | <a href="#parents">Ancestors</a> | <a href="#flat">All Members</a> | <a href="#children">Descendants</a>  ]</strong><p>
<h2><a name="quickind">Quick Index</a></h2>
<dl>
<dd><a href="#OVERVIEW_TEXT">OVERVIEW TEXT</a>
<dd><a href="#AUTHOR">AUTHOR</a>
</dl>
<a name="aag"><hr><p></p></a><h2>Class Summary</h2>
class lineInterval<br>
<br>
 {
<br>
<br><i><b>public</b></i>:
<dl>
<dd>double <a href="lineInterval.html#double_hi()_const$">hi</a>() const;
<dd>double <a href="lineInterval.html#double_low()_const$">low</a>() const;
<dd><a href="interval.html">interval</a> <a href="lineInterval.html#interval_partial(int_i)_const$">partial</a>(int i) const;
<dd><a href="lineInterval.html#lineInterval(interval)$">lineInterval</a>(<a href="interval.html">interval</a>);
<dd><a href="lineInterval.html#lineInterval()$">lineInterval</a>();
</dl>
<i><b>protected</b></i>:
<dl>
</dl>
}; // lineInterval <p>
<p>Back to the <a href="#topofdoc">top</a> of  <i>lineInterval</i><p>
<a name="OVERVIEW_TEXT"><hr><p></p></a><h3>OVERVIEW TEXT</h3>
	A lineInterval should be thought of as an <a href="interval.html">interval</a> version of a 
	linear function.
	Functions in the Kepler library typically return lineIntervals.
	This return value is a <a href="linearization.html">linearization</a> of the function at the point
	at which it is evaluated.
	Upper and lower bounds on the function value are
	obtained through the member functions <a href="#double_hi()_const$">hi</a>() and <a href="#double_low()_const$">low</a>().  Interval
	bounds on the partial derivatives of the lineInterval are obtained
	through the function <a href="#interval_partial(int_i)_const$">partial</a>(int).
<p>
<p>
<p>Back to the <a href="#topofdoc">top</a> of  <i>lineInterval</i><p>
<a name="AUTHOR"><hr><p></p></a><h3>AUTHOR</h3>
	Thomas C. Hales
<p>Back to the <a href="#topofdoc">top</a> of  <i>lineInterval</i><p>
<a name="double_hi()_const$"><hr><p></p><h3>double hi() const;</h3></a>
		   The upper bound on a lineInterval
<p>
<p><pre>
inline double <a href="#double_hi()_const$">hi</a>() const;
</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> lineInterval </i> <p>
<a name="double_low()_const$"><hr><p></p><h3>double low() const;</h3></a>
		   The lower bound on a lineInterval
<p>
<p><pre>
inline double <a href="#double_low()_const$">low</a>() const;
</pre>
<p><em>Function is currently defined <strong>inline</strong>.</em></p>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> lineInterval </i> <p>
<a name="interval_partial(int_i)_const$"><hr><p></p><h3>interval partial(int i) const;</h3></a>
		   Interval bounds on the ith partial derivative of the lineInterval
<p>
<p><pre>
<a href="interval.html">interval</a> <a href="#interval_partial(int_i)_const$">partial</a>(int i) const;
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> lineInterval </i> <p>
<a name="lineInterval(interval)$"><hr><p></p><h3>lineInterval(interval);</h3></a>
		   An <a href="interval.html">interval</a> can be promoted to a constant function (all
		   partial derivatives are zero)
<p>
<p><pre>
<a href="#lineInterval()$">lineInterval</a>(<a href="interval.html">interval</a>);
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> lineInterval </i> <p>
<a name="lineInterval()$"><hr><p></p><h3>lineInterval();</h3></a>
		   Initialize to zero.
<p>
<p><pre>
<a href="#lineInterval()$">lineInterval</a>();
</pre>
<br><p>Back to the <a href="#topofdoc">top</a> of  <i> lineInterval </i> <p>
<a name="flat"><hr><p></p></a>
<h2>All Members</h2>
<dl>
<dt><strong>public:</strong>
<dd>double <a href="lineInterval.html#double_hi()_const$">hi</a>() const;
<dd>double <a href="lineInterval.html#double_low()_const$">low</a>() const;
<dd><a href="interval.html">interval</a> <a href="lineInterval.html#interval_partial(int_i)_const$">partial</a>(int i) const;
<dt><strong>protected:</strong>
</dl>
<p>Back to the <a href="#topofdoc">top</a> of  lineInterval<p>
<a name="parents"><hr><p></p></a>
<h2>Ancestors</h2>
Class does not inherit from any other class.<p>
<p>Back to the <a href="#topofdoc">top</a> of  lineInterval<p>
<a name="children"><hr><p></p></a>
<h2>Descendants</h2>
Class is not inherited by any others.<p>
<p>Back to the <a href="#topofdoc">top</a> of  lineInterval<p>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Dec 22 19:37:21 1997
.<p>
<address>Report <a href="mailto:jkotula@unimax.com">problems</a> to jkotula@unimax.com</address>
</body></html>
