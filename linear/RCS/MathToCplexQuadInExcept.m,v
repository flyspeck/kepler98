head	1.3;
access;
symbols;
locks
	hales:1.3; strict;
comment	@// @;


1.3
date	98.05.25.11.46.00;	author hales;	state Exp;
branches;
next	1.2;

1.2
date	98.04.25.02.10.43;	author hales;	state Exp;
branches;
next	1.1;

1.1
date	98.04.22.16.58.46;	author hales;	state Exp;
branches;
next	;


desc
@Quad inequalities in figures with exceptional clusters.
@


1.3
log
@*** empty log message ***
@
text
@(* adapted from MathToCplexQuadCase.m, 3/12/98 *)

(* let's make it independent of MathToCplexQuadCase.m: comment out the next line.
	If[SameQ[MathToCplexQuadCase//Head,Symbol],<< MathToCplexQuadCase.m];
*)

If[SameQ[MathToCplexExceptCase//Head,Symbol],<< MathToCplexExcept.m];
If[SameQ[LPm`File//Head,Symbol],<< LPm.m];

rQE:= << MathToCplexQuadInExcept.m; (* for testing *)
MathToCplexQuadInExcept=1;

(* division of quads into cases :
	  two flat quarters, split between vertices 1 & 3
	  two flat quarters, split between vertices 2 & 4,
	  octahedra, scored gamma/octavor on each upright quarter
	  no quarters, scored vorVc 
*)

quadInstallExcept[basefile_]:= Module[{flist},
    flist=Select[Range[Length[GBLregions]],Length[GBLregions[[#]]]==4&];
	{"\n\n\\ quadInstallExcept:\n",
    Array[quadInstallExceptOne[basefile,flist[[#]]]&,Length[flist]]
		} //StringJoin
    ];

StringVar["yoct",f_]:= "y(F"<>S[f]<>")";
StringVar["yoct",f_,i_]:= "y(F"<>S[f]<>","<>S[GBLregions[[f,i]]]<>")";
StringVar["solF",f_,i_,j_]:= Module[{i1,j1},
    {i1,j1}=Sort[{GBLregions[[f,i]],GBLregions[[f,j]]}];
    "sol(F"<>S[f]<>","<>S[i1]<>","<>S[j1]<>")"];
StringVar["sigF",f_,i_,j_]:= Module[{i1,j1},
    {i1,j1}=Sort[{GBLregions[[f,i]],GBLregions[[f,j]]}];
    "sig(F"<>S[f]<>","<>S[i1]<>","<>S[j1]<>")"];
StringVar["dihF",f_,i_,j_]:= Module[{i1,j1},
    {i1,j1}=Sort[{GBLregions[[f,i]],GBLregions[[f,j]]}];
    "dih(F"<>S[f]<>","<>S[i1]<>","<>S[j1]<>")"];
StringVar["dihFx",i_,j_,f_]:="dih("<>S[GBLregions[[f,i]]]<>","<>
        S[GBLregions[[f,j]]]<>",F"<>S[f]<>")";
StringVar["slack",s_,f_]:= "slack"<>s<>S[f];


quadInstallExceptOne[basefile_,f_]:= 
    "\n\n\\ fInstall 412\n"<>
        fInstall[f,4,1,2]<>"\n\n\\ 234\n"<>fInstall[f,2,3,4]<>
    "\n\n\\ fInstall 123\n"<>
        fInstall[f,1,2,3]<>"\n\n\\ 341\n"<>fInstall[f,3,4,1]<>
    "\n\n\\ oInstall\n"<>
        oInstall[f,1,2]<>oInstall[f,2,3]<>oInstall[f,3,4]<>oInstall[f,4,1]<>
    "\n\n\\ vInstall\n"<>
        vInstall[basefile,f];

flatEquations =
    {
	"\\ flat Equations",
    "- dih2 + 0.35 y2 - 0.15 y1 - 0.15 y3 + 0.7022 y5 - 0.17 y4 + slack > -0.0123",
    "- dih3 + 0.35 y3 - 0.15 y1 - 0.15 y2 + 0.7022 y6 - 0.17 y4 + slack > -0.0123",
    "  dih2 - 0.13 y2 + 0.631 y1 + "<>
               "0.31 y3 - 0.58 y5 + 0.413 y4 + 0.025 y6 + slack > 2.63363 ",
    "  dih3 - 0.13 y3 + 0.631 y1 + "<>
               "0.31 y2 - 0.58 y6 + 0.413 y4 + 0.025 y5 + slack > 2.63363 ",
    " -dih1 + 0.714 y1 - 0.221 y2 - 0.221 y3 + "<>
               "0.92 y4 - 0.221 y5 - 0.221 y6 + slack > 0.3482",
    "  dih1 - 0.315 y1 + 0.3972 y2 + 0.3972 y3 - "<>
               "0.715 y4 +  0.3972 y5 + 0.3972 y6 + slack > 2.37095",
    "- solid - 0.187 y1 - 0.187 y2 - "<>
               "0.187 y3 + 0.1185 y4 + 0.479 y5 + 0.479 y6 + slack > 0.437235 ",
    "+ solid + 0.488 y1 + 0.488 y2 + "<>
               "0.488 y3 - 0.334 y5 - 0.334 y6 + slack > 2.244 ",
    "- sigma - 0.159 y1 - 0.081 y2 - 0.081 y3 - "<>
               "0.133 y5 - 0.133 y6 + slack > -1.17401",
    "- sigma - 0.419351 solid + 0.0436 y5 + 0.0436 y6 + 0.079431 dih1 "<>
                " + slack > 0.0296 ", 
    " sigma + 0.197 y4 + 0.197 y5 + 0.197 y6 - slack < 1.34521 ", 
	" slack - Cqr1 - Cqr2 = 0",
    " y4 + slack > 2.51",
    " y4 - slack < 2.8284271247462"
    };
fEquations= Apply[StringJoin,Map[(#<>"\n")&,flatEquations]];

fInstall[f_,i_,j_,k_]:= (* quad f, vertices i,j,k in[1,2,3,4], *)
    Module[{iv,jv,kv},
        {iv,jv,kv}=Map[GBLregions[[f,#]]&,{i,j,k}];
      StringReplace[fEquations,
        {"y2"->StringVar["y",iv],
         "y1"->StringVar["y",jv],
         "y3"->StringVar["y",kv],
         "y5"->StringVar["y",jv,kv],
         "y4"->StringVar["y",iv,kv],
         "y6"->StringVar["y",iv,jv],
         "dih2"->StringVar["dih",f,i,j],
         "dih1"->StringVar["dih",f,j],
         "dih3"->StringVar["dih",f,k,j],
         "solid"->StringVar["sol",f,j],
		 "slack"->StringVar["slack",{"A","B"}[[1+Mod[i+j+k,2]]],f],
		 "Cqr1"->"Cqrl"<>S[f 100],
		 "Cqr2"->"Cqr"<>{"s","l"}[[1+Mod[i+j+k,2]]]<>S[f 100+1],
         "sigma"->StringVar["sig",f,j]}
    ]
    ];

OctahedralEquations:= {
	"\n\n\\ OctahedralEquations",
    " y1 + slack > 2.51 ",
    " y1 - slack < 2.8284271247462 ",
    " y2 + slack > 2 ",
    " y3 + slack > 2 ",
    " y4 + slack > 2 ",
    " y5 + slack > 2 ",
    " y6 + slack > 2 ",
    " y2 - slack < 2.51 ",
    " y3 - slack < 2.51 ",
    " y4 - slack < 2.51 ",
    " y5 - slack < 2.51 ",
    " y6 - slack < 2.51 ",
    " dih1 - 0.636 y1 + 0.462 y2 + 0.462 y3 - 0.82 y4 + 0.462 y5 + "<>
        " 0.462 y6 + slack > 1.82419 ", (* case 20 *)
    " - dih1 + 0.55 y1 - 0.214 y2 - 0.214 y3 + 1.24 y4 - 0.214 y5 "<>
        " - 0.214 y6 + slack > 0.75281 ",  (* case21 *)
    " dih2 + 0.4 y1 - 0.15 y2 + 0.09 y3 + 0.631 y4 - 0.57 y5 + 0.23 y6 " <>
    "  + slack > 2.5481", (* case 22 *)
    " - dih2 - 0.454 y1 + 0.34 y2 + 0.154 y3 - 0.346 y4 + " <>
        "0.805 y5 + slack > -0.3429", (* case 23 *)
    " dih3 + 0.4 y1 - 0.15 y3 + 0.09 y2 + 0.631 y4 - 0.57 y6 + 0.23 y5 " <>
    "  + slack > 2.5481", (* case 22 *)
    " - dih3 - 0.454 y1 + 0.34 y3 + 0.154 y2 - 0.346 y4 + " <>
        "0.805 y6 + slack > -0.3429", (* case 23 *)
    " sol + 0.065 y2 + 0.065 y3 + 0.061 y4 - 0.115 y5 - "<>
        "0.115 y6 + slack > 0.2618", (* case 24 *)
    " - sol - 0.293 y1 - 0.03 y2 - 0.03 y3 + 0.12 y4 + " <>
        "0.325 y5 + 0.325 y6 + slack > 0.2514", (* case 25 *)
    " - sig - 0.054 y2 - 0.054 y3 - 0.083 y4 - 0.054 y5 - "<>
        "0.054 y6 + slack > -0.59834", (* case 26,27,28 *)
    " - sig - 0.419351 sol + 0.079431 dih2 - 0.0846 y1 + slack > -0.30592 " ,
                (* case 69,70,71, added 11/24/97 *)
    " - sig - 0.419351 sol + 0.079431 dih3 - 0.0846 y1 + slack > -0.30592 ",
                (* case 69,70,71, added 11/24/97 *)
	" slack - Cqrs - Cqrl =0",
    OctExtra (* added 12/2/97 *)
    };

(* patch.... *)
(* This equation holds if y2,y3 < 2.13 *)
OctExtra := If[False," - sig + 0.07 y1 - 0.133 y2 - 0.133 y3 - 0.135 y4 - "<>
   "0.133 y5 - 0.133 y6 + slack > -1.1583 ","xxxxxx + slack > 0"];

oEquations= Apply[StringJoin,Map[(#<>"\n")&,OctahedralEquations]];

oInstall[f_,i_,j_]:= (* quad f, vertices i,j,k in[1,2,3,4], *)
    Module[{iv,jv},
        {iv,jv}={i,j}/.VertexSub[f];
      StringReplace[oEquations,
        {"y1"->StringVar["yoct",f],
         "y2"->StringVar["y",iv],
         "y3"->StringVar["y",jv],
         "y4"->StringVar["y",iv,jv],
         "y5"->StringVar["yoct",f,j],
         "y6"->StringVar["yoct",f,i],
         "dih1"->StringVar["dihF",f,i,j],
         "dih2"->StringVar["dihFx",i,j,f],
         "dih3"->StringVar["dihFx",j,i,f],
         "sol"->StringVar["solF",f,i,j],
		 "slack"->StringVar["slack","Oct",f],
		 "Cqrs"->"Cqrs"<>S[f 100],
		 "Cqrl"->"Cqrl"<>S[f 100+1],
         "sig"->StringVar["sigF",f,i,j]}
    ]
    ];

(* vorVc stuff *)
vInstall[basefile_,f_]:= Module[{vquad},
		vquad={1,2,3,4}/.VertexSub[f];
		{Array[AddVcAtQuadOne[basefile,f,#]&,4],
		 Array[LPm`UpdateAdih[basefile,StringVar["y",vquad[[#]]],
			StringVar["dih",f,#],StringVar["Adih",f,#]]&,4],
		 ExceptRelationText[f,{{1,2,3,4}}], (* leaves penalty open *)
		 ExceptVcText[f,{{1,2,3,4}}],
		 QuoinText[f]
		}//StringJoin
        ];

(* vorVc stuff *)
UpdateFace[basefile_,f_]:= Module[{face},
		face=GBLregions[[f]];
		 Array[LPm`UpdateAdih[basefile,StringVar["y",face[[#]]],
			StringVar["dih",f,#],StringVar["Adih",f,#]]&,Length[face]]
		//StringJoin
        ];

VcEquations = {
	"\n\n\\ VcEquations",
    " dih1 - 0.372 y1 + 0.465 y2 + 0.465 y3 + 0.465 y5 + "<>
        " 0.465 y6 + slack > 4.885" (* case 19 *),
	" pen - slack =0",
	" slack - CqrsA - CqrsB =0"
    };
VcExtraEquations = { (* case 21 , assumes dih < 2.12.... *)
    " - vor - 0.06 y2 - 0.06 y3 - 0.185 y5 - 0.185 y6 + slack > -0.9978 "
    };

AddVcAtQuadOne[basefile_,f_,i_]:= Module[{r,eqnlist},
	(* f is a face Number, 1..GBLregions//Length *)
	(* i = 1,2,3,4 *)
	(* unorthodox labels, dih4,quo42,etc. 4 refers to corner opposite 1,
		this allows standard labels 1,2,3 on the front simplex...,
		 *)
	eqnlist = VcEquations;
	If[StringLength[basefile]>0&&LPm`max[basefile,StringVar["dih",f,i]]<2.12,
		 eqnlist = Join[eqnlist,VcExtraEquations] ];
	eqnlist = Apply[StringJoin,Map[(#<>"\n")&,eqnlist]];
	r = RotateLeft[GBLregions[[f]],i-1];
	  StringReplace[eqnlist,
		{"y1"->StringVar["y",r[[1]]],
		 "y2"->StringVar["y",r[[2]]],
		 "y3"->StringVar["y",r[[4]]],
		 "y4"->StringVar["y",r[[2]],r[[4]]],
		 "y5"->StringVar["y",r[[1]],r[[4]]], 
		 "y6"->StringVar["y",r[[1]],r[[2]]],
		 "dih1"->StringVar["dih",f,i],
		 "vor"->StringVar["sig",f,i],
		 "pen"->StringVar["pen",f],
		 "slack"->StringVar["slack","Vc",f],
		 "CqrsA"->"Cqrs"<>S[f 100],
		 "CqrsB"->"Cqrs"<>S[f 100+1]
		}
	]
	];

(* BUGBUG -- needs fixing *)
QuadVarRelations:= Module[{fc},
	fc = Select[Range[Length[GBLregions]],Length[GBLregions[[#]]]==4&];
	Array[QuadVarOneRelation[fc[[#]]]&,Length[fc]]//StringJoin
	];

QuadVarOneRelation[f_]:= Module[{s},
    freeVar=freeVar~Join~Array[StringVar["sig",f,#]&,4];
	freeVar=freeVar~Join~Array[StringVar["sigF",f,#,AugMod[#,4]]&,4];
	freeVar=freeVar~Join~Array[StringVar["dih",f,#,AugMod[#,4]]&,4];
	freeVar=freeVar~Join~Array[StringVar["dih",f,AugMod[#,4],#]&,4];
	s = {
    "\n\n\\ QuadVarRelations"<>S[f]<>"\n",
	(* solid on flats relates to solid on quad *)
	StringVar["sol",f]<>"-"<>StringVar["sol",f,1]<>"-"<>
		StringVar["sol",f,3]<>" =0\n",
	StringVar["sol",f]<>"-"<>StringVar["sol",f,2]<>"-"<>
		StringVar["sol",f,4]<>" =0\n",
	StringVar["sig",f]<>"-"<>StringVar["sig",f,1]<>"-"<>
		StringVar["sig",f,3]<>" =0\n",
	StringVar["sig",f]<>"-"<>StringVar["sig",f,2]<>"-"<>
		StringVar["sig",f,4]<>" =0\n",
	(* solid on a flat relates to dihedrals *)
	StringVar["sol",f,1]<>"-",StringVar["dih",f,1],"-",
		StringVar["dih",f,2,1],"-",StringVar["dih",f,4,1],"+pi=0\n",
	StringVar["sol",f,2]<>"-",StringVar["dih",f,2],"-",
		StringVar["dih",f,1,2],"-",StringVar["dih",f,3,2],"+pi=0\n",
	StringVar["sol",f,3]<>"-",StringVar["dih",f,3],"-",
		StringVar["dih",f,2,3],"-",StringVar["dih",f,4,3],"+pi=0\n",
	StringVar["sol",f,4]<>"-",StringVar["dih",f,4],"-",
		StringVar["dih",f,1,4],"-",StringVar["dih",f,3,4],"+pi=0\n",	
	(* two dihedrals make the full angle *)
	StringVar["dih",f,1],"-",StringVar["dih",f,1,2],"-",
		StringVar["dih",f,1,4]," =0\n",
	StringVar["dih",f,2],"-",StringVar["dih",f,2,1],"-",
		StringVar["dih",f,2,3]," =0\n",
	StringVar["dih",f,3],"-",StringVar["dih",f,3,2],"-",
		StringVar["dih",f,3,4]," =0\n",
	StringVar["dih",f,4],"-",StringVar["dih",f,4,3],"-",
		StringVar["dih",f,4,1]," =0\n"}//StringJoin;

    (* octahedral constraints *)
    {s,
	"\n\\ octahedral relations:\n",
		StringVar["sigF",f,1,2]<>" +",
           StringVar["sigF",f,2,3]<>" +",
           StringVar["sigF",f,3,4]<>" +",
           StringVar["sigF",f,4,1]<>" -",
            StringVar["sig",f] <> " =0\n",
    	StringVar["dihF",f,1,2]<>" +"<>
           StringVar["dihF",f,2,3]<>" +"<>
           StringVar["dihF",f,3,4]<>" +"<>
           StringVar["dihF",f,4,1]<>" - 2 pi = 0\n",
    Array[StringVar["dihFx",#,AugMod[#,4],f]<>" +"<>
            StringVar["dihFx",#,IMod[#+3,4],f]<>" -"<>
            StringVar["dih",f,#]<>" =0\n"&,4],
    Array[StringVar["dihF",f,#,AugMod[#,4]]<>" +"<>
            StringVar["dihFx",#,AugMod[#,4],f]<>" +"<>
            StringVar["dihFx",AugMod[#,4],#,f]<>" -"<>
            StringVar["solF",f,#,AugMod[#,4]]<>" - pi = 0\n"&,4]
    }//StringJoin
];
@


1.2
log
@Major revision.  Just about everything has been rewritten.
Now instead of generating 4 cplex files (one for each case),
everything is put in a generic file with slack variables
slackOctF, slackVcF, slackAF, slackBF, where F is the face number.
Setting the slack variable to 0 will activate the constraints.
@
text
@d182 8
@


1.1
log
@Initial revision
@
text
@d3 4
a6 2
(* If no exceptions: *)
If[SameQ[MathToCplexQuadCase//Head,Symbol],<< MathToCplexQuadCase.m];
d8 3
a10 1
read:= << MathToCplexQuadInExcept.m; (* for testing *)
d14 4
a17 7
	Case 1.  two flat quarters, split between vertices 1 & 3
	Case 2.  two flat quarters, split between vertices 2 & 4,
	Case 3.  octahedra, scored gamma/octavor on each upright quarter
	Case 4.  no quarters, scored vorVc 
  If there are several quads,
	we give case {i1,i2,...,ik}, ij = 1,2,3,4.
	ij is the case for the jth quarter.
d20 1
a20 12
quadInstallExceptOne[config_,except_,c_,f_,quadtype_,hts_]:= Switch[quadtype,
    1,"\\ fInstall 412\n"<>
        fInstall[f,4,1,2]<>"\\ 234\n"<>fInstall[f,2,3,4],
    2,"\\ fInstall 123\n"<>
        fInstall[f,1,2,3]<>"\\ 341\n"<>fInstall[f,3,4,1],
    3,"\\ oInstall\n"<>
        oInstall[f,1,2]<>oInstall[f,2,3]<>oInstall[f,3,4]<>oInstall[f,4,1],
    4,"\\ vInstall\n"<>
        vInstall[config,except,c,f,hts],
    _,Print["BAD E IDEA"];Print[config," ",except," ",c," ",f," ",quadtype];""];

quadInstallExcept[config_,except_,c_,u_,hts_]:= Module[{flist,i},
d22 3
a24 4
    If[Length[flist]!=Length[u],Print["unexpected qI"];
			Print[config," ",except," ",c," ",u," ",hts," ",flist];Return[""]];
    Table[quadInstallExceptOne[config,except,c,
						flist[[i]],u[[i]],hts],{i,1,Length[u]}]//StringJoin
d27 25
d53 48
d102 78
a179 4
vInstall[config_,except_,c_,f_,heights_]:= Module[{dihmins,dihmaxes},
		dihmins = FaceDihMin[config,except,c,f];
		dihmaxes = FaceDihMax[config,except,c,f];
        AddVcAtQuad[f,heights,dihmins,dihmaxes]
d182 10
a191 2
AddVcAtQuad[f_,heights_,dihmins_,dihmaxes_]:= Module[{i},
Table[AddVcAtQuadOne[f,i,heights,dihmins,dihmaxes],{i,1,4}]//StringJoin];
d193 1
a193 1
AddVcAtQuadOne[f_,i_,heights_,dihmins_,dihmaxes_]:= 
a195 6
	(* heights = {h1,..,hGBLnumver}, upperbounds on heights,
		as returned, say by AllHeights,
	  dihmins ={d1,d2,d3,d4}, lower bounds on dihedral at 4 vertices.
	  dihmax ={d1,d2,d3,d4}, upper bounds on dihedral at 4 vertices.
	*)
	(* A[h_]:= (1 - h/t0)*(phi[h, t0] - phi[t0, t0]) *)
d198 1
a198 5
		sig refers to full score, vor refers to score on front simplex,
		SF  refers to full solid, sol refers to solid on front simplex, 
		quo refers to simplex numbering 1,2,3,
		Quo refers to quad numbering 1,2,3,4 *)
	Module[{eqnlist,imV,iV,ipV,im,ip,io,ioV,dihmax,dihmin,hmax,A,h},
d200 2
a201 4
	If[Max[heights[[GBLregions[[f]] ]] ]<2.12,
		eqnlist = Join[eqnlist,VcExtraEquations]
	  ];
	If[i==1,eqnlist = Join[eqnlist,VcDefinition]];
d203 1
a203 9
	A[h_]:= (1.255-h)^2(h+2.51)0.480601966344976728560;
	dihmax = dihmaxes[[i]];
	dihmin = dihmins[[i]]; 
	im = IMod[i-1,4];
	ip = IMod[i+1,4];
	io = IMod[i+2,4];
	{imV,iV,ipV,ioV}=Map[GBLregions[[f,#]]&,{im,i,ip,io}];
	hmax = heights[[iV]]/2;
	slope = (A[hmax]-A[1])/(hmax-1);
d205 6
a210 6
		{"y1"->StringVar["y",iV],
		 "y2"->StringVar["y",ipV],
		 "y3"->StringVar["y",imV],
		 "y4"->StringVar["y",ipV,imV],
		 "y5"->StringVar["y",iV,imV],
		 "y6"->StringVar["y",iV,ipV],
a211 4
		 "dih2"->StringVar["dih",f,ip,i],
		 "dih3"->StringVar["dih",f,im,i],
		 "sol"->StringVar["sol",f,i],
		 "SF"->StringVar["sol",f],
d213 4
a216 24
		 "sig"->StringVar["sig",f],
		 "quo12"->StringVar["quo",f,i,ip],
		 "quo21"->StringVar["quo",f,ip,i],
		 "quo13"->StringVar["quo",f,i,im],
		 "quo31"->StringVar["quo",f,im,i],
		 "Quo12"->StringVar["quo",f,i,ip],
		 "Quo23"->StringVar["quo",f,ip,io],
		 "Quo34"->StringVar["quo",f,io,im],
		 "Quo41"->StringVar["quo",f,im,i],
		 "Quo21"->StringVar["quo",f,ip,i],
		 "Quo32"->StringVar["quo",f,io,ip],
		 "Quo43"->StringVar["quo",f,im,io],
		 "Quo14"->StringVar["quo",f,i,im],
		 "phi0" -> "-0.5666365478933329",
		 "4doct" -> "2.883611798069859",
		 "A1"->"0.109691511444153",
		 "Adih1"->StringVar["Adih",f,i],
		 "Adih2"->StringVar["Adih",f,ip],
		 "Adih3"->StringVar["Adih",f,io],
		 "Adih4"->StringVar["Adih",f,im],
		 "halfslopeXdihmin"->SR[(1/2) slope dihmin],
		 "slopeXdihmin"->S[slope dihmin],
		 "halfslopeXdihmax"->SR[(1/2) slope dihmax],
		 "dihmaxXslopeMA1"-> S[dihmax (slope - A[1])]
d221 4
a224 213


(* Generate a list of heights, from cplex *)
AllHeights[config_,f_,c_ (* shortlist parameters *)]:= 
	Module[{filename,stream,sedfile,i},
	Initialize[config];
	filename = S[config]<>".F"<>S[f]<>".C"<>S[c];
	stream = OpenWrite["/tmp/Hexec"];
	WriteString[stream,"set logfile /tmp/cplex.log\n"]; 
	WriteString[stream,"set output results n /tmp/y.log\n"]; 
	WriteString[stream,"set output dialog n /tmp/x.log\n "]; 
	Do[WriteString[stream,
		"read /afs/math.lsa.umich.edu/group/fac/hales/pub/sphere/"<>
		"cplex/SHORT/QUADdihminetc/cplexE.lp"<>filename<>" lp\n"<>
		"add \n"<>StringVar["y",i]<>"-X=0\nend\noptimize\n\n"],
			{i,1,GBLnumver}];
	WriteString[stream,"\nquit\n"];
	Close[stream];
	Close[OpenWrite["/tmp/cplex.log"]];
	Close[OpenWrite["/tmp/x.log"]];
	Close[OpenWrite["/tmp/y.log"]];
	Run["cplex < /tmp/Hexec"]; 
	stream = OpenWrite["/tmp/values"];
	Close[stream];
	sedfile = "/afs/math.lsa.umich.edu/group/fac/hales/pub/sphere/"<>
		"cplex/SHORT/getAddValues";
	Run["sed -f "<>sedfile<> " /tmp/cplex.log >  /tmp/values"];
	stream = OpenAppend["/tmp/values"];
	WriteString[stream,"0}~Drop~-1;"];
	Close[stream];
	<< /tmp/values;
	Map[First,values]
	];

(* Generate a list of heights, from cplex *)
FaceDihMin[config_,f_,c_ (* shortlist parameters *),facenum_]:= 
	Module[{filename,stream,sedfile,i},
	Initialize[config];
	filename = S[config]<>".F"<>S[f]<>".C"<>S[c];
	stream = OpenWrite["/tmp/Hexec"];
	WriteString[stream,"set logfile /tmp/cplex.log\n"]; 
	WriteString[stream,"set output results n /tmp/y.log\n"]; 
	WriteString[stream,"set output dialog n /tmp/x.log\n "]; 
	Do[WriteString[stream,
		"read /afs/math.lsa.umich.edu/group/fac/hales/pub/sphere/"<>
		"cplex/SHORT/QUADdihminetc/cplexE.lp"<>filename<>" lp\n"<>
		"add \n"<>StringVar["dih",facenum,i]<>"+X=0\nend\noptimize\n\n"],
			{i,1,Length[GBLregions[[facenum]]] }];
	WriteString[stream,"\nquit\n"];
	Close[stream];
	Close[OpenWrite["/tmp/cplex.log"]];
	Close[OpenWrite["/tmp/x.log"]];
	Close[OpenWrite["/tmp/y.log"]];
	Run["cplex < /tmp/Hexec"]; 
	stream = OpenWrite["/tmp/values"];
	Close[stream];
	sedfile = "/afs/math.lsa.umich.edu/group/fac/hales/pub/sphere/"<>
		"cplex/SHORT/getAddValues";
	Run["sed -f "<>sedfile<> " /tmp/cplex.log >  /tmp/values"];
	stream = OpenAppend["/tmp/values"];
	WriteString[stream,"0}~Drop~-1;"];
	Close[stream];
	<< /tmp/values;
	-Map[First,values]
	];


(* Generate a list of heights, from cplex *)
	(* Look at cplexE.lpX.FY.CZ  (X,Y,Z)= (config,f,c),
			look at the dihedral angles on face facenum,
			maximized using cplex *)

FaceDihMax[config_,f_,c_ (* shortlist parameters *),facenum_]:= 
	Module[{filename,stream,sedfile,i},
	Initialize[config];
	filename = S[config]<>".F"<>S[f]<>".C"<>S[c];
	stream = OpenWrite["/tmp/Hexec"];
	WriteString[stream,"set logfile /tmp/cplex.log\n"]; 
	WriteString[stream,"set output results n /tmp/y.log\n"]; 
	WriteString[stream,"set output dialog n /tmp/x.log\n "]; 
	Do[WriteString[stream,
		"read /afs/math.lsa.umich.edu/group/fac/hales/pub/sphere/"<>
		"cplex/SHORT/QUADdihminetc/cplexE.lp"<>filename<>" lp\n"<>
		"add \n"<>StringVar["dih",facenum,i]<>"-X=0\nend\noptimize\n\n"],
			{i,1,Length[GBLregions[[facenum]]] }];
	WriteString[stream,"\nquit\n"];
	Close[stream];
	Close[OpenWrite["/tmp/cplex.log"]];
	Close[OpenWrite["/tmp/x.log"]];
	Close[OpenWrite["/tmp/y.log"]];
	Run["cplex < /tmp/Hexec"]; 
	stream = OpenWrite["/tmp/values"];
	Close[stream];
	sedfile = "/afs/math.lsa.umich.edu/group/fac/hales/pub/sphere/"<>
		"cplex/SHORT/getAddValues";
	Run["sed -f "<>sedfile<> " /tmp/cplex.log >  /tmp/values"];
	stream = OpenAppend["/tmp/values"];
	WriteString[stream,"0}~Drop~-1;"];
	Close[stream];
	<< /tmp/values;
	Map[First,values]
	];

ExceptDihTextNew[f_,p_,yhts_]:= Module[{u,i,s1},
    u = ExceptDihMinMaxBetter[f,p];
    s1={
    "\n\n\\ ExceptDihText ",
    "\n\n\\ dihmin, dihmax : \n",
    (* when dihBuffer=0, get usual problem. dihBuffer=>0, is relaxation,
        this was added because many of the new optimization problems
        are infeasible without this relaxation.  So we relax and
        add a penalty term (-dihBuffer) to the objective function. *)
    Table[
        {StringVar["dihE",f,u[[i,1]],u[[i,2]],u[[i,3]]]<>" > "<>S[u[[i,4]]],
        "\n",
         StringVar["dihE",f,u[[i,1]],u[[i,2]],u[[i,3]]]<>
                " -0.000001 dihBuffer < "<>S[u[[i,5]]],
         "\n"},
        {i,1,Length[u]}]}//StringJoin;
 
    (* Adih is only needed on truncated regions. But we give it generally *)
    Module[{A,h,hmax,slope,uu,v,vertex,aE,dE},
    A[h_]:= (1.255-h)^2(h+2.51)0.480601966344976728560;
    uu = Select[u,#[[1]]>0&];
    {
    s1,"\n\\ Adih bounds : \n",
    Table[
        vertex=uu[[i,1]];
        v=uu[[i]];
        aE = StringVar["AdihE",f,v[[1]],v[[2]],v[[3]]];
        dE = StringVar["dihE",f,v[[1]],v[[2]],v[[3]]];
        hmax = yhts[[vertex]]/2.;
        slope = (A[hmax]-A[1])/(hmax-1);
        {
        (* first Adih equation *)
        "\n\\ slope=",S[slope]," dihmin= ",S[v[[4]]]," dihmax= ",S[v[[5]]],"\n",
        aE,  SR[-A[1]]," ", dE,
         SR[-slope v[[4]]/2]," ",StringVar["y",vertex],
        " < ", S[-slope v[[4]] ],"\n",
 
        (* second Adih equation *)
         aE,
         SR[-slope v[[5]]/2]," ",StringVar["y",vertex],
         " < ", S[(A[1]-slope)v[[5]] ], "\n"
           
        },
        {i,1,Length[uu]}
        ]
 
 
        }//StringJoin]
 
    ];


exceptIneq[f_,excepType_,yhts_]:= Module[{p},
	(* already initialized,... *)
	p = Setp[f,excepType];
	If[!CheckListToString[f,p],Print["Fatal Error "," ",f," ",ppos]; Quit[]];
    ExceptBounds[f,p];
    {ExceptRelationText[f,p],
    ExceptPenaltyText[f,p],
    ExceptFlatText[f,p],
    ExceptUprightText[f,p],
    ExceptAnchorLengthText[f,p],
    ExceptDihTextNew[f,p,yhts],
    ExceptMiscText[f,p],
    QuoinText[f],
    ExceptVcText[f,p],
    ExceptVertexExcessText[f,p]}//StringJoin
	];


CPLEXrun[config_,quadTypes_,exceptList_]:= 
	Module[{fExcept,stream,j,yhts},
        (* Read in MathToCplexQuadCase.m, install extra quad inequalities,
			and Exceptional inequalities.
            quadTypes is a vector {i1,...,ik}, with i in {1,2,3,4}, and
            k = number of quads.  It specifies flat,skewflat,oct,or Vc,
            for the extra inequalities,
		  exceptList is a {j1,...,jr}, with j one of the cases,
			for example for a hex, j in {1...,AllHex//Length},
			r is the number of exceptional faces.  *)
        Initialize[config];
		freeVar={};
		fExcept=Select[Range[Length[GBLregions]],Length[GBLregions[[#]]]>4&];
        Print[{config,quadTypes}];
        stream=OpenWrite["SHORT/LPh/cplex.lp"<>S[config]<>
			".F"<> S[fExcept//First]<>
			".C"<>S[exceptList//First]<>
			".Q"<>S[quadTypes//First] 
			];
        WRITEOUTstd[stream];
		If[Length[fExcept]!=Length[exceptList],
			Print[fExcept," ",exceptList," mistake here"]; 
			Close[stream]; Return[] ];
		yhts=AllHeights[config,fExcept//Last,exceptList//Last];
		Do[WriteString[stream,exceptIneq[fExcept[[j]],exceptList[[j]],yhts]],
			{j,1,Length[fExcept]}];
        WriteString[stream,
		  quadInstallExcept[config,
			fExcept//Last,exceptList//Last,quadTypes,yhts]];
		WriteString[stream,QRText];
        WriteString[stream,bounds];
        WriteString[stream,"\n\nEND\n\n"];
        WriteString[stream,faceCode];
        Close[stream];
        ];

(* If we have an element of cplexEsum, say {0.444051,154,16,42},
	try this, hexguys *)
WRITEOUThex[Esum_]:= Module[{i},
	Table[Print[i];CPLEXrun[Esum[[2]],{i},{Esum//Last}],{i,1,4}];
d227 56
@
